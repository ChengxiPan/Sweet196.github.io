<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BJC -- A Buct Java Compiler</title>
    <url>/2023/06/17/BJC/</url>
    <content><![CDATA[<h2 id="Buct-Java-Compiler"><a href="#Buct-Java-Compiler" class="headerlink" title="Buct-Java-Compiler"></a><a href="https://github.com/Sweet196/Compiler">Buct-Java-Compiler</a></h2><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 22.04.2 LTS</span><br><span class="line">Release:        22.04</span><br></pre></td></tr></table></figure>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>规则参考来源：</p>
<p><a href="https://github.com/Dayunxi/LL1-Compiler">https://github.com/Dayunxi/LL1-Compiler</a></p>
<p><a href="https://github.com/shellphy/jack-compiler">https://github.com/shellphy/jack-compiler</a></p>
<h3 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h3><p>该项目旨在设计和实现一个类似Java语言的编译器。通过这个编译器，用户可以编写使用类和对象、面向对象特性以及类似Java语法的程序，并将其编译成可执行的机器代码或目标代码。编译器将完成从源代码到目标代码的转换过程，包括<strong>词法分析、语法分析、语义分析和目标代码生成</strong>等阶段。</p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── ErrorInputs</span><br><span class="line">│   ├── error1.java</span><br><span class="line">│   ├── error2.java</span><br><span class="line">│   └── error3.java</span><br><span class="line">├── Makefile</span><br><span class="line">├── Readme.md</span><br><span class="line">├── include</span><br><span class="line">│   ├── Analyzer.h</span><br><span class="line">│   ├── CodeGen.h</span><br><span class="line">│   ├── Error.h</span><br><span class="line">│   ├── Parser.h</span><br><span class="line">│   ├── Scanner.h</span><br><span class="line">│   └── SymbolTable.h</span><br><span class="line">├── inputs</span><br><span class="line">│   ├── Main.java</span><br><span class="line">│   ├── demo2_Array.java</span><br><span class="line">│   └── demo3_gcd.java</span><br><span class="line">├── rules</span><br><span class="line">│   ├── Array.java</span><br><span class="line">│   ├── IO.java</span><br><span class="line">│   ├── Input.java</span><br><span class="line">│   ├── Math.java</span><br><span class="line">│   ├── Memory.java</span><br><span class="line">│   ├── Output.java</span><br><span class="line">│   ├── String.java</span><br><span class="line">│   └── Sys.java</span><br><span class="line">├── src</span><br><span class="line">│   ├── Analyzer.cpp</span><br><span class="line">│   ├── CodeGen.cpp</span><br><span class="line">│   ├── Error.cpp</span><br><span class="line">│   ├── Parser.cpp</span><br><span class="line">│   ├── Scanner.cpp</span><br><span class="line">│   ├── SymbolTable.cpp</span><br><span class="line">│   └── main.cpp</span><br><span class="line">└── tests</span><br><span class="line">    ├── Analyzer.cpp</span><br><span class="line">    ├── Analyzer.h</span><br><span class="line">    ├── CodeGen.cpp</span><br><span class="line">    ├── CodeGen.h</span><br><span class="line">    ├── Error.cpp</span><br><span class="line">    ├── Error.h</span><br><span class="line">    ├── Lexicalt.cpp</span><br><span class="line">    ├── Main.java</span><br><span class="line">    ├── Makefile</span><br><span class="line">    ├── Parser.cpp</span><br><span class="line">    ├── Parser.h</span><br><span class="line">    ├── Parsert.cpp</span><br><span class="line">    ├── Scanner.cpp</span><br><span class="line">    ├── Scanner.h</span><br><span class="line">    ├── SymbolTable.cpp</span><br><span class="line">    ├── SymbolTable.h</span><br><span class="line">    ├── main.cpp</span><br><span class="line">    └── rules</span><br><span class="line">        ├── Array.java</span><br><span class="line">        ├── IO.java</span><br><span class="line">        ├── Input.java</span><br><span class="line">        ├── Math.java</span><br><span class="line">        ├── Memory.java</span><br><span class="line">        ├── Output.java</span><br><span class="line">        ├── String.java</span><br><span class="line">        └── Sys.java</span><br><span class="line"></span><br><span class="line">7 directories, 55 files</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CMakeLists.txt</code>：CMake构建系统的配置文件，用于定义项目的构建规则和依赖关系。</li>
<li><code>Makefile</code>：用于GNU Make构建工具的配置文件，定义了项目的编译规则和依赖关系。</li>
<li><code>Readme.md</code>：项目的说明文档，包含项目的简介、使用方法、贡献指南等信息。</li>
<li><code>rules</code>目录：存放接口相关的文件，以<code>.java</code>为扩展名，用于语法规则。</li>
<li><code>include</code>目录：包含项目的头文件（<code>.h</code>文件），用于声明各个模块的接口和数据结构。</li>
<li><code>inputs</code>目录：存放输入文件的目录，可能包含多个<code>.java</code>文件，如<code>demo1_HelloWorld.java</code>、<code>demo2_Array.java</code>等，用于测试编译器的输入。</li>
<li><code>src</code>目录：包含项目的源代码文件，包括各个模块的实现文件（<code>.cpp</code>文件）和主程序文件（<code>main.cpp</code>）。</li>
<li><code>tests</code>目录：包含项目的测试代码，用于验证编译器的功能和正确性。该目录下可能包含多个测试文件和相关的配置文件（如<code>Makefile</code>）</li>
</ul>
<h3 id="CMake-Workflow"><a href="#CMake-Workflow" class="headerlink" title="CMake Workflow"></a>CMake Workflow</h3><p>CMake是一个跨平台的构建工具，用于管理和构建项目的代码。它允许开发者使用简单的描述文件来定义项目的构建过程，并生成适用于不同编译器和操作系统的构建脚本。</p>
<p>在GitHub仓库中设置CMake Workflow，利用CMake的跨平台、简化构建过程、自动化构建、可扩展性和社区支持等优势，更高效地管理和构建项目，提高开发效率和代码质量。</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202306161902930.png" alt="image-20230616190249196"></p>
<h3 id="CMake-and-Make"><a href="#CMake-and-Make" class="headerlink" title="CMake and Make"></a>CMake and Make</h3><p>使用CMake和Make来进行编译，旨在简化开发过程。通过使用CMake轻松定义项目的构建规则和依赖关系，并生成适用于不同平台和编译器的构建脚本。Make作为一个常用的构建工具，配合CMake使用，可以根据Makefile中定义的编译规则和依赖关系，自动构建项目。Make的强大功能使得编译过程更加高效和可靠，特别是对于大型项目和需要频繁构建的场景。</p>
<p>本项目cmake结构如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(Java_Compiler)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置输出路径</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/output&quot;</span>)</span><br><span class="line"><span class="comment"># 头文件库</span></span><br><span class="line"><span class="keyword">include_directories</span> (<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 在 src 目录下查找所有的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span> (src JAVA_LIB_SRC)</span><br><span class="line"><span class="comment"># 将所有可执行文件链接到一个静态库中,并编译</span></span><br><span class="line"><span class="keyword">add_library</span> (javalib <span class="string">&quot;$&#123;JAVA_LIB_SRC&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 将编译出的文件放在一个main.cpp中</span></span><br><span class="line"><span class="keyword">add_executable</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> javalib) <span class="comment">#将jacklib链接到可执行文件</span></span><br></pre></td></tr></table></figure>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>1、将远程仓库克隆到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:Sweet196/Compiler.git</span><br></pre></td></tr></table></figure>
<p>2、使用cmake编译project</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">cmake .</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>3、生成的可执行文件会产生在<code>output</code>文件夹下。使用前需要做以下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r inputs output/</span><br><span class="line">cp -r rules output/</span><br></pre></td></tr></table></figure>
<p>4、进入output文件夹执行。<span style="color:red">提供了三个测试用例，每个使用前都需要将文件名改成Main，否则会触发规定的classname error</span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd output</span><br><span class="line">./Java_Compiler inputs/Main.java</span><br></pre></td></tr></table></figure>
<p>此外，我们分别提供了模块化测试的功能，存放在了tests文件夹中。进行通过如下命令使用： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd tests</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理编译出的文件以便重新编译</span></span><br><span class="line">make clean</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">词法分析：获取token以及tokenkind</span></span><br><span class="line">make Lexical</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法分析：</span></span><br><span class="line">make Parser</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语义分析、目标代码生成：输入错误可触发报错，输入正确会生成目标代码</span></span><br><span class="line">make CodeGen</span><br></pre></td></tr></table></figure>
<p>需要注意的是，tests文件夹内的测试仅包含了对<code>HelloWorld.java</code>的用例测试，对于其他功能（如语法分析中对各类接口的调用，生成规则及使用），可以自行编写测试。</p>
<p>inputs中提供了3个测试用例，提供的demo1如下:</p>
<ul>
<li><p>demo1: HelloWorld</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  function <span class="keyword">void</span> <span class="title function_">demo1_HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">    Output.printString(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>对应文件：<code>Scanner</code></p>
<p>识别源程序中的单词(token)；通过扫描之后在<code>output.txt</code>中写入程序中的所有token及其kind。其中kind表示token的词性或类型。    </p>
<h3 id="状态转移图"><a href="#状态转移图" class="headerlink" title="状态转移图"></a>状态转移图</h3><p>词法规则使用了正则表达式来定义，可以画出状态转移图(FA)。状态机转移图中的状态定义如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">States definition</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">START_STATE</td>
<td>开始状态</td>
</tr>
<tr>
<td style="text-align:left">ID_STATE</td>
<td>标识符状态</td>
</tr>
<tr>
<td style="text-align:left">INT_STATE</td>
<td>整型数状态</td>
</tr>
<tr>
<td style="text-align:left">CHAR_STATE</td>
<td>字符状态</td>
</tr>
<tr>
<td style="text-align:left">FLOAT_STATE</td>
<td>浮点数状态</td>
</tr>
<tr>
<td style="text-align:left">D_FLOAT_STATE</td>
<td>带小数点的浮点数状态</td>
</tr>
<tr>
<td style="text-align:left">E_FLOAT_STATE</td>
<td>科学技术法的浮点数状态</td>
</tr>
<tr>
<td style="text-align:left">STRING_STATE</td>
<td>字符串状态</td>
</tr>
<tr>
<td style="text-align:left">S_STRING_STATE</td>
<td>含有转移字符的字符串</td>
</tr>
<tr>
<td style="text-align:left">SYMBOL_STATE</td>
<td>符号状态</td>
</tr>
<tr>
<td style="text-align:left">INCOMMENT_STATE</td>
<td>注释状态</td>
</tr>
<tr>
<td style="text-align:left">P_INCOMMENT_STATE</td>
<td>快要结束注释状态</td>
</tr>
<tr>
<td style="text-align:left">DONE_STATE</td>
<td>结束状态</td>
</tr>
<tr>
<td style="text-align:left">ERROR_STATE</td>
<td>错误状态</td>
</tr>
</tbody>
</table>
</div>
<h3 id="TokenType"><a href="#TokenType" class="headerlink" title="TokenType"></a>TokenType</h3><p>在<code>Scanner::Token</code>结构体中，<code>kind</code>表示标记（Token）的类型。它是<code>Scanner::TokenType</code>枚举类型的一个成员，用于区分不同类型的标记。</p>
<p><code>Scanner::TokenType</code>枚举类型定义了不同的标记类型，包括：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Member</th>
<th>Description</th>
<th>KIND</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>KEY_WORD</code></td>
<td>关键字</td>
<td>0</td>
</tr>
<tr>
<td><code>ID</code></td>
<td>标识符</td>
<td>1</td>
</tr>
<tr>
<td><code>INT</code></td>
<td>整型数字</td>
<td>2</td>
</tr>
<tr>
<td><code>BOOL</code></td>
<td>布尔类型</td>
<td>3</td>
</tr>
<tr>
<td><code>CHAR</code></td>
<td>字符</td>
<td>4</td>
</tr>
<tr>
<td><code>STRING</code></td>
<td>字符串</td>
<td>5</td>
</tr>
<tr>
<td><code>SYMBOL</code></td>
<td>合法的符号</td>
<td>6</td>
</tr>
<tr>
<td><code>NONE</code></td>
<td>无类型</td>
<td>7</td>
</tr>
<tr>
<td><code>ERROR</code></td>
<td>错误</td>
<td>8</td>
</tr>
<tr>
<td><code>ENDOFFILE</code></td>
<td>文件结束</td>
<td>9</td>
</tr>
</tbody>
</table>
</div>
<h3 id="保留字与关键字"><a href="#保留字与关键字" class="headerlink" title="保留字与关键字"></a>保留字与关键字</h3><p>支持以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Category</th>
<th>Classification</th>
<th>Content</th>
</tr>
</thead>
<tbody>
<tr>
<td>Keywords</td>
<td>Class related</td>
<td>class, constructor, function, method, field, static</td>
</tr>
<tr>
<td></td>
<td>Function related</td>
<td>int, char, boolean, void, true, false, this</td>
</tr>
<tr>
<td></td>
<td>Control flow related</td>
<td>if, else, while, return</td>
</tr>
<tr>
<td>Operators</td>
<td>Delimiters</td>
<td>{, }, (, ), [, ], ., ,, ;</td>
</tr>
<tr>
<td></td>
<td>Arithmetic operators</td>
<td>+, -, *, /</td>
</tr>
<tr>
<td></td>
<td>Logical operators</td>
<td>&amp;,\</td>
<td>,~</td>
</tr>
<tr>
<td></td>
<td>Comparison operators</td>
<td>&lt;, &gt;, =, ==, !=</td>
</tr>
</tbody>
</table>
</div>
<p>编写主函数进行测试，可得到词法分析结果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Scanner.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Scanner scanner;</span><br><span class="line">  scanner.<span class="built_in">openFile</span>(<span class="string">&quot;../inputs/demo1_HelloWorld.java&quot;</span>);</span><br><span class="line">  Scanner::Token token = scanner.<span class="built_in">nextToken</span>();</span><br><span class="line">  <span class="keyword">while</span> (token.kind != Scanner::ENDOFFILE) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[Token]: &quot;</span> &lt;&lt; token.lexeme &lt;&lt; <span class="string">&quot; [Kind]: &quot;</span> &lt;&lt; token.kind &lt;&lt; endl;</span><br><span class="line">    token = scanner.<span class="built_in">nextToken</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  scanner.<span class="built_in">closeFile</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202306161859926.png" alt="image-20230616185857411" style="zoom: 50%;" /></p>
<h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>对应文件：<code>Parser.cpp</code><br>使用递归下降的方法实现。递归下降（Recursive Descent）是一种常用的自顶向下的语法分析方法，用于将输入的源代码逐个标记（Token）地解析为语法树（Parse Tree）。在递归下降方法中，语法规则的每个非终结符对应一个递归函数，这些函数相互调用以实现语法分析。</p>
<h3 id="语法分析的任务"><a href="#语法分析的任务" class="headerlink" title="语法分析的任务"></a>语法分析的任务</h3><p>语法分析具有两个任务</p>
<ul>
<li>判断源程序是否符合语法规则</li>
<li>生成抽象语法树</li>
</ul>
<h3 id="产生式"><a href="#产生式" class="headerlink" title="产生式"></a>产生式</h3><p>编译器使用了上下文无关文法(BNF)进行定义,下面是对上述文法中每个产生式（Production）的解释：</p>
<ol>
<li><p><code>program -&gt; classlist</code>: 程序由类列表组成。</p>
</li>
<li><p><code>classlist -&gt; classlist class | class</code>: 类列表由一个或多个类组成。</p>
</li>
<li><p><code>class -&gt; class ID &#123; classVarDecList subroutineDecList &#125;</code>: 类由类名、类变量声明列表和子例程声明列表组成。</p>
</li>
<li><p><code>classVarDecList -&gt; classVarDecList classVarDec | ε</code>: 类变量声明列表由一个或多个类变量声明组成，或为空。</p>
</li>
<li><p><code>classVarDec -&gt; static type varNameList ; | field type varNameList ;</code>: 类变量声明包括静态变量声明和字段声明。</p>
</li>
<li><p><code>varNameList -&gt; varNameList , ID | ID</code>: 变量名列表由一个或多个变量名组成，用逗号分隔。</p>
</li>
<li><p><code>type -&gt; int | float | char | boolean | void | ID</code>: 类型可以是int、float、char、boolean、void或标识符。</p>
</li>
<li><p><code>subroutineDecList -&gt; subroutineDecList subroutineDec | ε</code>: 子例程声明列表由一个或多个子例程声明组成，或为空。</p>
</li>
<li><p><code>subroutineDec -&gt; constructor type ID ( params ) subroutineBody | function type ID ( params ) subroutineBody | method type ID (params ) subroutineBody</code>: 子例程声明包括构造函数声明、函数声明和方法声明。</p>
</li>
<li><p><code>params -&gt; paramList | ε</code>: 参数由参数列表组成，或为空。</p>
</li>
<li><p><code>paramList -&gt; paramList , param | param</code>: 参数列表由一个或多个参数组成，用逗号分隔。</p>
</li>
<li><p><code>param -&gt; type ID</code>: 参数由类型和标识符组成。</p>
</li>
<li><p><code>subroutineBody -&gt; &#123; varDecList statements &#125;</code>: 子例程体由变量声明列表和语句组成。</p>
</li>
<li><p><code>varDecList -&gt; varDecList varDec | ε</code>: 变量声明列表由一个或多个变量声明组成，或为空。</p>
</li>
<li><p><code>varDec -&gt; type varNameList ;</code>: 变量声明由类型和变量名列表组成。</p>
</li>
<li><p><code>statements -&gt; statements statement | ε</code>: 语句由一个或多个语句组成，或为空。</p>
</li>
<li><p><code>statement -&gt; assign_statement | if_statement | while_statement | return_statement | call_statement ;</code>: 语句可以是赋值语句、条件语句、循环语句、返回语句或调用语句。</p>
</li>
<li><p><code>assign_statement -&gt; leftValue = expression ;</code>: 赋值语句由左值、等号和表达式组成。</p>
</li>
<li><p><code>leftValue -&gt; ID | ID [ expression ]</code>: 左值可以是标识符或标识符后跟方括号的表达式。</p>
</li>
<li><p><code>if_statement -&gt; if ( expression ) statement | if ( expression ) statement else statement</code>: 条件语句可以是带有或不带有else子句的if语句。</p>
</li>
<li><p><code>while_statement -&gt; while ( expression ) &#123; statement &#125;</code>: 循环语句由循环条件和循环体组成。</p>
</li>
<li><p><code>return_statement -&gt; return ; | return expression ;</code>: 返回语句可以是空返回或带有返回表达式。</p>
</li>
<li><p><code>call_statement -&gt; ID ( expressions ) | ID . ID ( expressions )</code>: 调用语句可以是函数调用或方法调用。</p>
</li>
<li><p><code>expressions -&gt; expression_list | ε</code>: 表达式由表达式列表组成，或为空。</p>
</li>
<li><p><code>expression_list -&gt; expression_list , expression | expression</code>: 表达式列表由一个或多个表达式组成，用逗号分隔。</p>
</li>
<li><p><code>expression -&gt; expression &amp; boolExpression | expression | boolExpression</code>: 表达式可以是逻辑与操作、逻辑或操作或布尔表达式。</p>
</li>
<li><p><code>boolExpression -&gt; additive_expression relational_operator additive_expression | additive_expression</code>: 布尔表达式由加法表达式和关系运算符组成，或仅由加法表达式组成。</p>
</li>
<li><p><code>relational_operator -&gt; &lt;= | &gt;= | == | &lt; | &gt; | !=</code>: 关系运算符可以是小于等于、大于等于、等于、小于、大于或不等于。</p>
</li>
<li><p><code>additive_expression -&gt; additive_expression + term | additive_expression – term | term</code>: 加法表达式由加法、减法或项组成。</p>
</li>
<li><p><code>term -&gt; term * factor | term / factor | factor</code>: 项由乘法、除法或因子组成。</p>
</li>
<li><p><code>factor -&gt; - positive_factor | positive_factor</code>: 因子可以是负数因子或正数因子。</p>
</li>
<li><p><code>positive_factor -&gt; ~ not_factor | not_factor</code>: 正数因子可以是按位取反的因子或非按位取反的因子。</p>
</li>
<li><p><code>not_factor -&gt; INT_CONST | CHAR_CONST | STRING_CONST | keywordConstant | ID | ID [ expression ] | call_expression | ( expression )</code>: 非因子可以是整数常量、字符常量、字符串常量、关键字常量、标识符、标识符后跟方括号的表达式、调用表达式或括号中的表达式。</p>
</li>
<li><p><code>keywordConstant -&gt; true | false | null | this</code>: 关键字常量可以是true、false、null或this。</p>
</li>
<li><p><code>call_expression -&gt; ID ( expression ) | ID . ID ( expression )</code>: 调用表达式可以是函数调用或方法调用。</p>
</li>
</ol>
<p>这些产生式描述了程序中各个语法成分之间的结构关系，用于构建语法分析器以解析程序代码。</p>
<p>以下是不同语法树节点对应的输出:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong><em>\</em>Case**</strong></th>
<th><strong><em>\</em>Output**</strong></th>
<th><strong><em>\</em>Node Name**</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CLASS_K</td>
<td>class</td>
<td>类节点</td>
</tr>
<tr>
<td>CLASS_VAR_DEC_K</td>
<td>class_var_dec</td>
<td>类变量声明节点</td>
</tr>
<tr>
<td>SUBROUTINE_DEC_K</td>
<td>subroutine_dec</td>
<td>函数声明节点</td>
</tr>
<tr>
<td>BASIC_TYPE_K</td>
<td>basic_type <lexeme></td>
<td>基本类型节点</td>
</tr>
<tr>
<td>CLASS_TYPE_K</td>
<td>class_type <lexeme></td>
<td>类类型节点</td>
</tr>
<tr>
<td>PARAM_K</td>
<td>param</td>
<td>参数节点</td>
</tr>
<tr>
<td>VAR_DEC_K</td>
<td>var_dec</td>
<td>变量声明节点</td>
</tr>
<tr>
<td>ARRAY_K</td>
<td>array</td>
<td>数组节点</td>
</tr>
<tr>
<td>VAR_K</td>
<td>var</td>
<td>变量节点</td>
</tr>
<tr>
<td>IF_STATEMENT_K</td>
<td>if_statement</td>
<td>条件语句节点</td>
</tr>
<tr>
<td>WHILE_STATEMENT_K</td>
<td>while_statement</td>
<td>循环语句节点</td>
</tr>
<tr>
<td>RETURN_STATEMENT_K</td>
<td>return_statement</td>
<td>返回语句节点</td>
</tr>
<tr>
<td>CALL_STATEMENT_K</td>
<td>call_statement</td>
<td>调用语句节点</td>
</tr>
<tr>
<td>BOOL_EXPRESSION_K</td>
<td>bool_expression <lexeme></td>
<td>布尔表达式节点</td>
</tr>
<tr>
<td>COMPARE_K</td>
<td>compare <lexeme></td>
<td>比较节点</td>
</tr>
<tr>
<td>OPERATION_K</td>
<td>operation <lexeme></td>
<td>操作节点</td>
</tr>
<tr>
<td>BOOL_K</td>
<td>bool</td>
<td>布尔节点</td>
</tr>
<tr>
<td>ASSIGN_K</td>
<td>assign</td>
<td>赋值节点</td>
</tr>
<tr>
<td>SUBROUTINE_BODY_K</td>
<td>subroutine_body</td>
<td>函数体节点</td>
</tr>
</tbody>
</table>
</div>
<p>对于输入的一个示例的输入文件<code>Main.java</code>,可获得如下抽象语法树.由上至下分别代表类节点，函数声明节点，基本类型节点（void），函数体节点，调用语句节点，返回语句节点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">class</span><br><span class="line">        subroutine_dec</span><br><span class="line">            basic_type void</span><br><span class="line">            subroutine_body</span><br><span class="line">        call_statement</span><br><span class="line">                            return_statement</span><br></pre></td></tr></table></figure>
<h2 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h2><p>分析过程：通过对语法分析的结果（语法树）进行分析，判断语义错误，若有错输出错误内容。</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202306190829541.png" alt="image-20230619082854405" style="zoom: 67%;" /></p>
<p>成员函数：</p>
<pre>
class Analyzer {
private:
  Parser::TreeNode *tree;
  SymbolTable *symbolTable;
  string currentClassName;    // 遍历树的时候, 保存当前类的名称
  string currentFunctionName; // 遍历树的时候, 保存当前函数的名称
  void buildClassesTable(Parser::TreeNode *t);
  void checkStatements(Parser::TreeNode *t);
  void checkStatement(Parser::TreeNode *t);
  void checkExpression(Parser::TreeNode *t);
  void checkArguments(Parser::TreeNode *t, vector<string> const& parameter,
                      string const& functionName);
  void checkMain();
public:
  Analyzer(Parser::TreeNode *t);
  void check();
};
</pre>
### 分析过程
    首先通过函数buildClassesTable递归构建符号表中的类定义部分，将类的信息插入到符号表中，然后由函数checkMain：检查程序中是否存在名为Main的类，并验证其中是否存在名为main的静态函数，满足main函数的特定要求，最后函数checkStatements：递归检查语法树中的语句列表，将子过程的信息插入符号表，并调用checkStatement函数对每个语句进行语义检查，
checkStatement：检查赋值语句、条件语句、循环语句、返回语句和函数调用语句的语义正确性（其中调用函数函数checkExpression和函数checkArguments）。
### 函数详细描述

构造函数Analyzer::Analyzer(Parser::TreeNode *t)：接收一个指向语法树节点的指针，并初始化symbolTable和tree成员变量。

函数checkExpression：该函数用于检查语法树中的表达式部分的语义正确性。
函数首先检查传入的语法树节点是否为nullptr，如果不是，则对节点的子节点进行递归调用checkExpression函数。
然后，根据节点的类型（nodeKind）执行相应的操作：
如果节点类型为VAR_K，表示该节点为变量，函数会在符号表中查找变量的信息。首先在当前子程序的符号表中查找，如果找不到，则在当前类的符号表中查找。如果仍然找不到，则调用error5函数报告错误。
如果节点类型为ARRAY_K，表示该节点为数组变量，函数会在符号表中查找数组变量的信息，与上述步骤相同。如果找到了变量信息，还会检查变量的类型是否为"Array"，如果不是，则调用error6函数报告错误。
如果节点类型为CALL_EXPRESSION_K或CALL_STATEMENT_K，表示该节点为函数调用表达式或语句。函数首先检查调用的函数是否在当前类中声明，如果未找到，则调用error7函数报告错误。然后，检查当前子程序和被调用的函数是否都是方法（即类中的成员函数）。如果是，则调用error8函数报告错误。接下来，函数会在符号表中查找函数的信息，并使用checkArguments函数检查函数调用的参数是否匹配。最后，根据被调用函数的类型，将节点的nodeKind设置为相应的值（METHOD_CALL_K、FUNCTION_CALL_K或CONSTRUCTOR_CALL_K）。
如果节点类型不匹配上述情况，函数将执行默认操作，即不进行任何处理。
以上是checkExpression函数的主要功能。它通过递归遍历语法树，检查表达式中的变量、数组、函数调用等部分的语义正确性，并在发现错误时调用相应的错误处理函数报告错误。

函数checkStatement：该函数用于检查语法树中的语句部分的语义正确性。
函数根据语法树节点的类型（nodeKind）执行相应的操作：
如果节点类型为CLASS_K，表示该节点为类声明，函数会将当前类的名称设置为节点的第一个子节点的词素（token.lexeme）。
如果节点类型为ASSIGN_K，表示该节点为赋值语句，函数会分别检查赋值语句的左侧表达式和右侧表达式的语义正确性，通过调用checkExpression函数进行检查。
如果节点类型为IF_STATEMENT_K或WHILE_STATEMENT_K，表示该节点为条件语句（if语句或while循环语句），函数会检查条件表达式的语义正确性，通过调用checkExpression函数进行检查。
如果节点类型为RETURN_STATEMENT_K，表示该节点为返回语句，函数会检查返回表达式的语义正确性，通过调用checkExpression函数进行检查。同时，函数还会在特定情况下进行额外的错误检查，包括检查返回值是否与当前子程序的返回类型匹配、检查构造函数是否在返回语句中使用了"this"关键字等。
如果节点类型为CALL_STATEMENT_K，表示该节点为函数调用语句，函数会直接调用checkExpression函数对该节点进行检查。
如果节点类型不匹配上述情况，函数将执行默认操作，即不进行任何处理。
以上是checkStatement函数的主要功能。它根据语法树节点的类型执行相应的操作，对语句中的表达式、条件语句、返回语句和函数调用语句等部分进行语义正确性检查，并在发现错误时调用相应的错误处理函数报告错误。

函数checkArguments：该函数用于检查函数调用的参数是否与函数定义的参数匹配。
函数首先定义一个变量argumentSize，用于记录实际参数的个数，并初始化为0。
然后，函数使用循环遍历函数调用语句节点的子节点，即实际参数的表达式节点。对于每个参数节点，函数调用checkExpression函数进行语义检查，并将argumentSize增加1。
接下来，函数会进行参数个数的匹配检查。如果实际参数的个数小于形式参数的个数，说明参数个数不足，调用error14函数报告错误。
如果实际参数的个数大于形式参数的个数，说明参数个数过多，调用error15函数报告错误。
如果实际参数的个数与形式参数的个数相等，则参数匹配正确，不进行任何处理。
以上是checkArguments函数的主要功能。它通过循环遍历实际参数节点，进行语义检查，并比较实际参数个数与形式参数个数的匹配情况，根据不同情况调用相应的错误处理函数报告错误。

函数check：该函数用于进行语义分析的入口。
函数首先调用buildClassesTable函数，该函数根据语法树构建类符号表。它遍历语法树，收集类的信息并添加到符号表中。
接下来，函数调用checkMain函数，该函数用于检查是否存在Main类和main函数，以及其正确性。
然后，函数调用checkStatements函数，该函数对语法树中的所有语句进行语义分析。它遍历语法树，针对不同类型的语句调用相应的检查函数进行语义分析。
以上是check函数的主要功能。它在语义分析过程中完成了类符号表的构建、Main类和main函数的检查，以及对语句部分的语义分析。

函数checkMain：该函数用于检查是否存在Main类和main函数，并对其进行正确性验证。
函数首先使用symbolTable->classIndexFind("Main")检查符号表中是否存在名为Main的类。如果不存在，调用error16函数报告错误。
接着，函数使用symbolTable->classesTableFind("Main", "main")查找Main类中是否存在名为main的函数。如果不存在，调用error17函数报告错误。
然后，函数检查找到的main函数的类型（kind）是否为函数类型（FUNCTION）。如果不是，调用error18函数报告错误。
接下来，函数检查找到的main函数的返回类型（type）是否为void。如果不是，调用error19函数报告错误。
最后，函数检查找到的main函数的参数列表（args）是否为空。如果不为空，调用error20函数报告错误。
以上是checkMain函数的主要功能。它用于检查Main类和main函数是否存在，并对其进行正确性验证，包括检查返回类型、参数列表等。在发现错误时，调用相应的错误处理函数报告错误。

函数buildClassesTable：该函数用于构建符号表中的类定义部分。
以下是函数的主要步骤：
声明一个静态变量depth，并将其初始化为0。该变量用于跟踪递归的深度。
如果depth大于2，则函数直接返回，避免无限递归。
进入一个循环，处理当前节点t及其后续节点。
在循环中，将当前节点t插入到符号表的类表（classesTableInsert）中，以记录类的定义信息。
对于当前节点t的每个子节点（最多5个），递归调用buildClassesTable函数，并将depth加1。这样可以逐层遍历语法树的子树，构建类定义的符号表。
递归调用结束后，将depth减1。
将当前节点t移动到下一个兄弟节点，继续处理下一个节点。
通过以上步骤，buildClassesTable函数可以遍历语法树中的类定义部分，并将类的信息插入到符号表中，以备后续的语义分析使用。函数中的深度限制（depth > 2）可以控制递归的层级，以避免无限递归或过度深入的问题。

函数checkStatements：该函数用于对语法树中的语句进行语义分析。
函数通过一个循环遍历语法树中的语句节点，每次迭代处理一个语句节点。
在循环的每个迭代中，首先调用symbolTable->subroutineTableInsert(t)将当前语句节点t插入子程序符号表中。这是为了记录当前语句所在的子程序（函数或方法）的信息，以便后续的语义分析。
接下来，函数调用checkStatement(t)对当前语句节点进行语义分析。根据语句节点的类型，调用相应的检查函数对语句进行处理。
然后，函数通过一个循环遍历当前语句节点的子节点，即该语句的子语句节点。对于每个子语句节点，递归调用checkStatements函数进行语义分析。
最后，函数更新当前语句节点为下一个兄弟节点，即进入下一个迭代。这样可以确保循环能够遍历所有的语句节点。
以上是checkStatements函数的主要功能。它通过循环遍历语法树中的语句节点，将每个语句节点插入子程序符号表，对每个语句节点进行语义分析，并递归处理每个语句节点的子语句节点。这样可以对整个语法树中的语句进行全面的语义分析。

这些函数共同完成了对语法树的语义分析，包括构建符号表、检查表达式、检查语句、检查函数调用等，以确保程序的语义正确性。

### 错误列表
对应文件`Error.cpp`
| 函数名            | 错误类型               |错误信息                                                                                                 |
| :---------------- | ---------------------- | --------------------------------------------------------------------------------------------------------|
| syntaxError       | 语法错误               |在当前解析器文件（currentParserFilename）的第 token.row 行，期望一个 expected，但实际得到一个 token.lexeme。 |
| error1            | 类名和文件名不一致。    |在文件 currentParserFilename.java 中，类名应该和文件名相同。                                               |
| error2            | 变量重定义             |在当前类 currentClass 的第 row 行，变量类型为 type，变量名为 name，已经被重定义。                            |
| error3            | 函数重定义              |在当前类 currentClass 的第 row 行，函数返回类型为 type，函数名为 name，已经被重定义。                       |
| error4            | 类型未定义             |在当前类 currentClassName 的第 row 行，类型 type 未定义                                                   |
| error5            | 变量未定义             |在当前类 currentClassName 的第 row 行，变量 varName 在当前作用域中未声明                                   |
| error6            | 类型不是数组类型       |在当前类 currentClassName 的第 row 行，类型 type 不是数组类型                                              |
| error7            | 调用类中不存在的成员函数|在当前类 currentClassName 的第 row 行，类 callerName 中不存在函数 functionName()                           |
| error8            | 调用函数用了错误的调用方式|在当前类 currentClassName 的第 row 行，子程序 functionName 被当成了一个方法，但实际上它是在函数内被调用的  |
| error9            | 在类中调用了不存在的函数|在当前类 currentClassName 的第 row 行，类 callerName 中不存在函数 functionName                             |
| error10           |调用不是当前类的成员函数|在当前类 currentClassName 的第 row 行，函数 functionName 不是类 callerName 的成员函数                       |
| error11           | 函数返回值类型错误      |在当前类 currentClassName 的第 row 行，函数返回了空值，但实际上返回类型应该是 type                          |
| error12           | 函数返回值类型错误      |在当前类 currentClassName 的第 row 行，函数返回了值，但实际上返回类型应该是 void                            |
| error13           | 构造函数返回值类型错误  |在当前类 currentClassName 的第 row 行，构造函数返回类型必须是类类型                                         |
| error14           | 函数参数数量不足        |在当前类 currentClassName 的第 row 行，函数 functionName() 的参数数量过少                                  |
| error15           | 函数参数数量过多        |在当前类 currentClassName 的第 row 行，函数 functionName() 的参数数量过多                                  |
| error16           |主类不存在               |主类不存在                                                                                               |
| error17           | 主类中没有 main 函数    |在主类中，main 函数不存在                                                                                 |
| error18           | main 函数的类型不正确   |在主类中，main 函数的类型必须是函数类型                                                                    |
| error19           | main 函数返回类型不正确 |在主类中，main 函数的返回类型必须是 void                                                                   |
| error20           | main 函数参数数量不正确 |在主类中，main 函数的参数数量必须为 null                                                                   |

每出现一个错误将会对错误数量进行累计计数，同时继续扫描剩余内容，直到指针到达文件末尾。error将全部返回并输出。

例：对于一个不包含`main()`的程序，如下所示，会返回以下错误：

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">     function <span class="keyword">void</span> <span class="title function_">ADADADWE</span><span class="params">()</span> &#123;</span><br><span class="line">       Output.printString(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

![image-20230618215317730](https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202306182153371.png)

### 符号表

对应文件`SymbolTable.cpp`

定义了一个SymbolTable类，其中包括了一些成员变量和成员函数，用于存储和操作符号表。

成员变量包括：

    currentClassNumber: 当前类的编号。
    static_index: 静态变量的编号。
    field_index: 成员变量的编号。
    arg_index: 参数的编号。
    var_index: 局部变量的编号。
    errorNum: 错误数量。
    classesTable: 用于存储类的符号表，是一个vector，每个元素是一个map，用于存储类中的变量和函数的信息。
    classIndex: 用于存储类的名称和编号的对应关系。
    None: 一个特殊的Info对象，表示一个符号表项不存在。
成员函数包括：

    getInstance: 获取符号表的唯一实例，如果实例不存在则创建一个新实例。
    SymbolTable: 构造函数，用于初始化成员变量。
    classesTableInsert: 向符号表中插入一个新的类、变量或函数的信息。
    在classesTableInsert函数中，根据节点类型的不同，分别执行不同的操作：
    如果节点类型是CLASS_K，表示遇到了一个新的类，此时需要新建一个map用于存储该类的变量和函数信息，并将该map加入到classesTable中。同时，记录当前类的名称和编号的对应关系，将静态变量和成员变量的编号初始化为0。

    如果节点类型是CLASS_VAR_DEC_K，表示遇到了一个类的成员变量的定义，此时需要将该成员变量的信息插入到当前类的map中。根据变量类型的不同，将其设置为静态变量或成员变量，并将其编号加1。如果插入失败，则说明该成员变量已经存在于符号表中，此时需要报错。

    如果节点类型是SUBROUTINE_DEC_K，表示遇到了一个函数的定义，此时需要将该函数的信息插入到当前类的map中。根据函数类型的不同，将其设置为函数、方法或构造函数，并将其返回值类型和参数类型加入到其Info对象的args中。如果插入失败，则说明该函数已经存在于符号表中，此时需要报错。

实现了符号表中子程序表的插入操作。具体来说，当节点的类型为CLASS_K时，会将当前类的名称保存在currentClass中；

当节点的类型为SUBROUTINE_DEC_K时，会初始化子程序表，并将当前类的编号保存在currentClassNumber中，然后将"this"关键字插入子程序表中，并将var_index和arg_index初始化为0；

当节点的类型为PARAM_K时，会先检查类型是否合法，再检查变量名是否合法，最后将变量信息插入子程序表中；当节点的类型为VAR_DEC_K时，会先检查类型是否合法，再将变量信息插入子程序表中。

在插入变量信息时，会将变量的类型、种类和索引等信息保存在一个Info结构体中，并将变量名作为键值插入子程序表中。如果有错误发生，则会调用error函数输出错误信息并返回。

实现了符号表中子程序表和类表的查找、初始化和输出操作。

subroutineTableFind函数用于在子程序表中查找指定名称的变量信息，并返回对应的Info结构体。如果查找失败，则返回None。
classesTableFind函数用于在指定类的类表中查找指定函数名称的变量信息，并返回对应的Info结构体。如果查找失败，则返回None。
initialSubroutineTable函数用于初始化子程序表，将其中的所有变量信息清空。
printClassesTable函数用于输出类表中的所有变量信息，包括变量名称、类型、种类、索引和参数列表等信息。
classIndexFind函数用于在类索引表中查找指定类名是否存在，如果存在则返回true，否则返回false。
getFieldNumber函数用于获取指定类中的FIELD类型变量数量。它首先在类索引表中查找指定类的编号，然后遍历该类的类表，统计其中的FIELD类型变量数量并返回。

## 目标代码生成

对应文件：`CodeGen`

### 目标代码生成的任务

目标代码生成是编译器的最后一个阶段，它的任务是将通过词法、语法、语义分析后的结果转换成目标代码，实现将高级语言翻译成底层的机器语言。也可也先将结果转换成中间代码，再将中间代码翻译成目标代码。

目标代码生成的主要任务包括：

1. 寄存器分配：将程序中的变量、临时值等映射到目标机器的寄存器或内存位置。这涉及到决定何时将变量放入寄存器中、何时将其保存到内存中，以及如何管理寄存器的使用。
2. 指令选择：根据源代码的语义和目标平台的指令集，选择合适的目标机器指令来执行相应的操作。这包括将源代码中的不同语句和表达式映射到目标机器指令的序列。

### 具体实现

#### 类属性

存储段

| Segment | 含义               |
| ------- | ------------------ |
| CONST   | 常量               |
| ARG     | 函数参数区         |
| LOCAL   | 本地变量区         |
| STATIC  | 静态变量区         |
| THIS    | 指向当前对象的指针 |
| THAT    | 指向其他对象的指针 |
| POINTER | 指针区             |
| TEMP    | 临时变量区         |

定义操作名称

| 操作名 | 操作含义                         |
| ------ | -------------------------------- |
| ADD    | 加法                             |
| SUB    | 减法                             |
| NEG    | 将操作数按位取反加一（求相反数） |
| EQ     | 等于                             |
| GT     | 大于                             |
| LT     | 小于                             |
| AND    | 与运算                           |
| OR     | 或运算                           |
| NOT    | 将操作数按位取反                 |

#### 成员函数

| 函数名            | 具体含义                                                     |
| ----------------- | ------------------------------------------------------------ |
| write ()          | 用于翻译语法树中的一个节点。该函数首先将节点对应的符号表信息插入符号表中，然后调用 `translate` 函数翻译当前节点，接着递归地调用 `write` 函数翻译当前节点的所有子节点。 |
| translate()       | 用于翻译语法树节点的具体操作。该函数根据节点类型的不同，调用不同的翻译函数来完成对应的操作。 |
| translateCall()   | 通过后序遍历语法树来生成相应的虚拟机代码，包括算术操作、比较操作、布尔操作、函数调用、变量访问等。 |
| writePush()       | 生成将指定段的指定索引处的值压入栈中。                       |
| writePop()        | 生成将栈顶元素弹出并存储到指定段的指定索引处。               |
| writeArithmetic() | 生成执行算术操作的虚拟机代码。                               |
| writeLabel()      | 生成设置标签。                                               |
| writeGoto()       | 生成无条件跳转。                                             |
| writeIf()         | 生成条件跳转。                                               |
| writeCall()       | 生成调用函数。                                               |
| writeFunction()   | 生成定义函数。                                               |
| writeReturn()     | 生成返回函数。                                               |

需要注意的是，由于跳过了中间代码生成的部分，没有进行四元式的编写；但是通过将不同的操作转化为相应的汇编指令来实现四元式的功能。简单解释如下：

<pre>
translate()：根据节点的类型选择相应的操作。在每个 case 中，根据节点类型执行相应的操作，例如处理赋值语句、方法调用、循环语句、条件语句等。这些操作会调用其他函数来生成相应的汇编代码。
writeExpression()：通过递归遍历表达式树来生成相应的汇编代码。根据表达式节点的类型，执行相应的操作。例如，对于算术运算节点，调用 writeArithmetic 函数生成相应的算术指令；对于变量节点，调用 writePush 函数将变量的值压入堆栈。
writePush()、writePop()：根据指定的段和索引生成相应的汇编代码，将值从指定的段读取或写入堆栈。
writeArithmetic()：根据指定的算术操作生成相应的汇编代码。
</pre>


<h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>通过本次编译器项目的开发，我们成功地设计和实现了一个类似Java语言的编译器，并完成了基本的输入输出功能。在项目的过程中，我们经历了词法分析、语法分析、语义分析和目标代码生成等多个阶段，每个阶段都提供了独特的挑战和学习机会。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>成果与挑战：通过团队的协作努力，我们成功地实现了基本的编译器功能，包括词法分析、语法分析、语义分析和目标代码生成。我们学习并掌握了编译原理的核心概念和算法，并将其应用于实际的编译器开发中。同时，我们也面对了各种挑战，如语法规则的设计、错误处理、符号表管理等，这些挑战提高了我们的编程技能和问题解决能力。</li>
<li>项目管理与合作：通过采用CMake和Make进行项目的构建，我们实现了项目的模块化和自动化，简化了开发过程。在团队合作方面，我们通过有效的沟通和任务分工，实现了高效的协作开发，确保了项目的进度和质量。</li>
<li>学习与成长：本次项目为我们提供了一个深入理解编译原理和语言设计的机会。通过手动实现编译器的各个阶段，我们加深了对编译器工作原理的理解，并提升了编程技能和代码质量控制的能力。</li>
</ol>
<h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>尽管我们在时间有限的情况下完成了基本的输入输出功能，但是仍有许多有趣的方向可以进一步拓展和改进。以下是对未来发展的展望：</p>
<ol>
<li>扩展语言功能：作为一个自创的类似Java语言，我们可以进一步扩展其功能和语法规则，使其更接近真实的Java语言。例如，支持更多的数据类型、控制结构、异常处理等特性，使我们的语言更加强大和实用。</li>
<li>实现高级特性：我们可以探索实现一些高级的编程特性，如泛型、反射、注解等，以增加语言的灵活性和可扩展性。</li>
<li>优化和性能提升：我们可以对编译器进行优化，提高生成的目标代码的质量和执行效率。可以使用更高级的优化技术，如常量折叠、死代码消除、循环展开等，以提高生成的目标代码的性能。</li>
<li>支持更多工具和库：为了增强我们的编译器的实用性，可以考虑与其他工具和库进行集成，如调试器、测试框架、标准库等。</li>
</ol>
<p>总的来说，我们已经取得了令人骄傲的成果，但编译器开发是一个庞大而复杂的领域，仍有许多发展的空间。通过继续学习和探索，我们可以不断提升自己的编译器开发技能，进一步完善我们的编译器，并为其他开发者提供更强大和易用的工具。</p>
]]></content>
  </entry>
  <entry>
    <title>Mnist Dataset dealt with Common Machine Learning Algorithms and CNN model</title>
    <url>/2023/05/21/CIS%20ML%20notes/</url>
    <content><![CDATA[<p>This Chapter contains normal ML Algorithms in CIS Lectures. The mnist dataset was selected for demonstration. It is worth noting that only 1000 samples were used for training and testing here, in order to accelerate the demonstration process. If better performance is to be achieved, all training and testing data should be used.</p>
<p>Project Repository: <a href="https://github.com/Sweet196/Basic-Mnist-Classification">Basic-Mnist-Classification</a></p>
<p><em>I will appreciate if you give my repository a star all follow my channel. Plzzzzzzzz!!!!</em></p>
<h3 id="SVM-Support-Vector-Machine"><a href="#SVM-Support-Vector-Machine" class="headerlink" title="SVM: Support Vector Machine"></a>SVM: Support Vector Machine</h3><p>Support Vector Machine (SVM) is a popular machine learning algorithm used for <strong>classification and regression analysis</strong>. The basic idea behind SVM is to find a hyperplane in a high-dimensional space that separates the different classes of data points as best as possible. In other words, SVM tries to find the <strong>boundary</strong> between two classes of data by maximizing the margin between them. This margin is the distance between the closest data points of each class to the separator or hyperplane.</p>
<p>SVM can also handle non-linearly separable datasets through a technique called <strong>kernel trick</strong>, which maps the input data into a higher-dimensional space where it becomes linearly separable. Some popular kernel functions include <strong>linear, polynomial, radial basis function (RBF), and sigmoid</strong>.</p>
<p>SVM has been widely used in various fields such as image recognition, text classification, bioinformatics, and finance due to its effectiveness in handling complex datasets and relatively good performance in comparison to other algorithms.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">X_train = X_train.reshape((<span class="number">60000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">X_test = X_test.reshape((<span class="number">10000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">y_train = y_train.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line">y_test = y_test.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line">svm = SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">svm.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = svm.predict(X_test)</span><br><span class="line"></span><br><span class="line">accuracy = svm.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &quot;</span>, accuracy)</span><br><span class="line"></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">sns.heatmap(cm, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Confusion Matrix&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted Label&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Label&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Accuracy: 0.853</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202305212314028.png" alt="image-20230521231407970" style="zoom: 67%;" /></p>
<h3 id="KNN-K-Nearest-Neighbor"><a href="#KNN-K-Nearest-Neighbor" class="headerlink" title="KNN: K-Nearest Neighbor"></a>KNN: K-Nearest Neighbor</h3><p>KNN (K-Nearest Neighbor) is one of the simplest machine learning algorithms, which can be used for <strong>classification and regression</strong>. It is a supervised learning algorithm. Its idea is that if <strong>most of the K most similar</strong> (i.e. closest) samples in the feature space belong to a certain category, then the sample also belongs to that category. That is to say, this method only <strong>determines the category of the sample to be divided based on the category of the nearest one or several samples</strong> in the classification decision.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">X_train = X_train.reshape((<span class="number">60000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">X_test = X_test.reshape((<span class="number">10000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">y_train = y_train.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line">y_test = y_test.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = knn.predict(X_test)</span><br><span class="line"></span><br><span class="line">accuracy = knn.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &quot;</span>, accuracy)</span><br><span class="line"></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">sns.heatmap(cm, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Confusion Matrix&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted Label&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Label&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Accuracy: 0.815</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202305212317886.png" alt="image-20230521231703633" style="zoom:67%;" /></p>
<h3 id="DTC-Decision-Tree-Classifier"><a href="#DTC-Decision-Tree-Classifier" class="headerlink" title="DTC: Decision Tree Classifier"></a>DTC: Decision Tree Classifier</h3><p><strong>Decision tree learning</strong> is a supervised learning approach used in <a href="https://en.wikipedia.org/wiki/Statistics">statistics</a>, <a href="https://en.wikipedia.org/wiki/Data_mining">data mining</a> and <a href="https://en.wikipedia.org/wiki/Machine_learning">machine learning</a>. In this formalism, a classification or regression <a href="https://en.wikipedia.org/wiki/Decision_tree">decision tree</a> is used as a <a href="https://en.wikipedia.org/wiki/Predictive_model">predictive model</a> to draw conclusions about a set of observations.</p>
<p>Tree models where the target variable can take a discrete set of values are called <strong><a href="https://en.wikipedia.org/wiki/Statistical_classification">classification</a> <a href="https://en.wikipedia.org/wiki/Decision_tree">trees</a></strong>; in these tree structures, <a href="https://en.wikipedia.org/wiki/Leaf_node">leaves</a> represent class labels and branches represent <a href="https://en.wikipedia.org/wiki/Logical_conjunction">conjunctions</a> of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically <a href="https://en.wikipedia.org/wiki/Real_numbers">real numbers</a>) are called <strong><a href="https://en.wikipedia.org/wiki/Regression_analysis">regression</a> <a href="https://en.wikipedia.org/wiki/Decision_tree">trees</a></strong>. More generally, the concept of regression tree can be extended to any kind of object equipped with pairwise dissimilarities such as categorical sequences.<a href="https://en.wikipedia.org/wiki/Decision_tree_learning#cite_note-:1-1">[1]</a></p>
<p>Decision trees are among the most popular machine learning algorithms given their intelligibility and simplicity.<a href="https://en.wikipedia.org/wiki/Decision_tree_learning#cite_note-2">[2]</a></p>
<p>In decision analysis, a decision tree can be used to visually and explicitly represent decisions and <a href="https://en.wikipedia.org/wiki/Decision_making">decision making</a>. In <a href="https://en.wikipedia.org/wiki/Data_mining">data mining</a>, a decision tree describes data (but the resulting classification tree can be an input for <a href="https://en.wikipedia.org/wiki/Decision_making">decision making</a>).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">X_train = X_train.reshape((<span class="number">60000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">X_test = X_test.reshape((<span class="number">10000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">y_train = y_train.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line">y_test = y_test.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line">dtc = DecisionTreeClassifier(max_depth=<span class="number">10</span>)</span><br><span class="line">dtc.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = dtc.predict(X_test)</span><br><span class="line"></span><br><span class="line">accuracy = dtc.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &quot;</span>, accuracy)</span><br><span class="line"></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">sns.heatmap(cm, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Confusion Matrix&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted Label&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Label&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Accuracy: 0.646</p>
<h3 id="RF-Random-Forest"><a href="#RF-Random-Forest" class="headerlink" title="RF: Random Forest"></a>RF: Random Forest</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">X_train = X_train.reshape((<span class="number">60000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">X_test = X_test.reshape((<span class="number">10000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">y_train = y_train.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line">y_test = y_test.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line">rfc = RandomForestClassifier(n_estimators=<span class="number">100</span>, max_depth=<span class="number">10</span>)</span><br><span class="line">rfc.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = rfc.predict(X_test)</span><br><span class="line"></span><br><span class="line">accuracy = rfc.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &quot;</span>, accuracy)</span><br><span class="line"></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">sns.heatmap(cm, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Confusion Matrix&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted Label&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Label&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Accuracy: 0.862</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202305212320902.png" alt="image-20230521232030222" style="zoom:67%;" /></p>
<h3 id="CNN-Network"><a href="#CNN-Network" class="headerlink" title="CNN Network"></a>CNN Network</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">X_train = X_train.reshape((<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[:<span class="number">1000</span>]</span><br><span class="line">X_test = X_test.reshape((<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[:<span class="number">1000</span>]</span><br><span class="line">y_train = y_train.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line">y_test = y_test.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line">X_train = X_train / <span class="number">255.0</span></span><br><span class="line">X_test = X_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">64</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">history = model.fit(X_train, y_train, epochs=<span class="number">50</span>, validation_data=(X_test, y_test))</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 Loss 图像</span></span><br><span class="line">ax[<span class="number">0</span>].plot(history.history[<span class="string">&#x27;loss&#x27;</span>], label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].plot(history.history[<span class="string">&#x27;val_loss&#x27;</span>], label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&#x27;Loss During Training&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 Accuracy 图像</span></span><br><span class="line">ax[<span class="number">1</span>].plot(history.history[<span class="string">&#x27;accuracy&#x27;</span>], label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">ax[<span class="number">1</span>].plot(history.history[<span class="string">&#x27;val_accuracy&#x27;</span>], label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&#x27;Accuracy During Training&#x27;</span>)</span><br><span class="line">ax[<span class="number">1</span>].set_xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">ax[<span class="number">1</span>].set_ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br><span class="line">ax[<span class="number">1</span>].legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202305212321585.png" alt="image-20230521232109490" style="zoom:67%;" /></p>
<h3 id="GBDT-Gradient-Boosting-Decision-Tree"><a href="#GBDT-Gradient-Boosting-Decision-Tree" class="headerlink" title="GBDT: Gradient Boosting Decision Tree"></a>GBDT: Gradient Boosting Decision Tree</h3><p>Classic gradient lifting tree: XGBoost and LightGBM. Some differences between them:</p>
<ul>
<li>Computational efficiency: LightGBM uses a histogram like technique when constructing decision trees, which can quickly find the optimal splitting point. Therefore, when training large datasets, LightGBM is usually faster than XGBoost.</li>
<li>Memory usage: LightGBM uses column based storage to reduce memory usage. This makes LightGBM more suitable for processing large high-dimensional data.</li>
<li>Regularization: XGBoost supports regularization technology to avoid overfitting, such as L1 and L2 regularization, feature importance ranking, etc. LightGBM only supports L2 regularization.</li>
<li>Distributed computing: XGBoost has built-in distributed computing capabilities, which can train models in parallel on multiple nodes. LightGBM currently does not support distributed computing.</li>
<li>Data sampling method: XGBoost adopts an instance based sampling method, which randomly selects a subset as the training set for each decision tree. LightGBM adopts a feature based sampling method, which samples features to select subsets.</li>
</ul>
<p>Overall, XGBoost and LightGBM perform well in practice, with the main difference being their design philosophy and implementation details. When choosing an algorithm, it should be based on the characteristics of the specific problem. If you need to process large-scale high-dimensional data, you can consider using LightGBM; If you need regularization or distributed computing, you can consider using XGBoost.</p>
<h4 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reshape the data for training and testing</span></span><br><span class="line">X_train = X_train.reshape((<span class="number">60000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">X_test = X_test.reshape((<span class="number">10000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">y_train = y_train.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line">y_test = y_test.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create DMatrix objects from the data</span></span><br><span class="line">dtrain = xgb.DMatrix(X_train, label=y_train)</span><br><span class="line">dtest = xgb.DMatrix(X_test, label=y_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the hyperparameters for the XGBoost model</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;eta&#x27;</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="string">&#x27;objective&#x27;</span>: <span class="string">&#x27;multi:softmax&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;num_class&#x27;</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the XGBoost model</span></span><br><span class="line">num_rounds = <span class="number">50</span></span><br><span class="line">bst = xgb.train(param, dtrain, num_rounds)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict the labels for the test set</span></span><br><span class="line">preds = bst.predict(dtest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate the accuracy of the classifier</span></span><br><span class="line">acc = accuracy_score(y_test, preds)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(acc * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the confusion matrix</span></span><br><span class="line">cm = confusion_matrix(y_test, preds)</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">sns.heatmap(cm, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Confusion Matrix&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted Label&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Label&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Accuracy: 82.60%</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202305212326246.png" alt="image-20230521232601907" style="zoom:67%;" /></p>
<h4 id="LightGBM"><a href="#LightGBM" class="headerlink" title="LightGBM"></a>LightGBM</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lightgbm <span class="keyword">as</span> lgb</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reshape the data for training and testing</span></span><br><span class="line">X_train = X_train.reshape((<span class="number">60000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">X_test = X_test.reshape((<span class="number">10000</span>, <span class="number">28</span>*<span class="number">28</span>))[:<span class="number">1000</span>]</span><br><span class="line">y_train = y_train.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line">y_test = y_test.astype(<span class="built_in">int</span>)[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Dataset objects from the data</span></span><br><span class="line">train_data = lgb.Dataset(X_train, label=y_train)</span><br><span class="line">test_data = lgb.Dataset(X_test, label=y_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the hyperparameters for the LightGBM model</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;learning_rate&#x27;</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="string">&#x27;objective&#x27;</span>: <span class="string">&#x27;multiclass&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;num_class&#x27;</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the LightGBM model</span></span><br><span class="line">num_rounds = <span class="number">50</span></span><br><span class="line">bst = lgb.train(param, train_data, num_rounds)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict the labels for the test set</span></span><br><span class="line">preds = bst.predict(X_test)</span><br><span class="line">preds = np.argmax(preds, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate the accuracy of the classifier</span></span><br><span class="line">acc = accuracy_score(y_test, preds)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy: &#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(acc * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the confusion matrix</span></span><br><span class="line">cm = confusion_matrix(y_test, preds)</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">sns.heatmap(cm, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Confusion Matrix&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted Label&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Label&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Accuracy: 82.90%</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202305212327127.png" alt="image-20230521232707306" style="zoom:67%;" /></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Python虚拟环境的创建与使用</title>
    <url>/2023/05/20/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>创建虚拟环境是一种良好的实践，可以在不干扰操作系统和其他 Python 应用程序的情况下，为您的项目提供独立的开发环境。在 Ubuntu 上创建 Python 虚拟环境需要执行以下步骤：</p>
<h3 id="Python创建虚拟环境"><a href="#Python创建虚拟环境" class="headerlink" title="Python创建虚拟环境"></a>Python创建虚拟环境</h3><h4 id="安装-venv-模块（如果尚未安装）："><a href="#安装-venv-模块（如果尚未安装）：" class="headerlink" title="安装 venv 模块（如果尚未安装）："></a>安装 venv 模块（如果尚未安装）：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3-venv</span><br></pre></td></tr></table></figure>
<h4 id="在您选择要放置虚拟环境的目录中创建一个新目录："><a href="#在您选择要放置虚拟环境的目录中创建一个新目录：" class="headerlink" title="在您选择要放置虚拟环境的目录中创建一个新目录："></a>在您选择要放置虚拟环境的目录中创建一个新目录：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line">cd myproject</span><br></pre></td></tr></table></figure>
<h4 id="创建虚拟环境："><a href="#创建虚拟环境：" class="headerlink" title="创建虚拟环境："></a>创建虚拟环境：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m venv myprojectenv</span><br></pre></td></tr></table></figure>
<p>这将创建一个名为“myprojectenv”的新目录，其中包含 Python 解释器和其他必需的文件。</p>
<h4 id="启动虚拟环境："><a href="#启动虚拟环境：" class="headerlink" title="启动虚拟环境："></a>启动虚拟环境：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source myprojectenv/<span class="built_in">bin</span>/activate</span><br></pre></td></tr></table></figure>
<p>注意：在 Windows 上，激活虚拟环境的命令略有不同，即 myprojectenv\Scripts\activate。</p>
<h4 id="使用虚拟环境中的-pip-安装所需的软件包："><a href="#使用虚拟环境中的-pip-安装所需的软件包：" class="headerlink" title="使用虚拟环境中的 pip 安装所需的软件包："></a>使用虚拟环境中的 pip 安装所需的软件包：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install package_name</span><br></pre></td></tr></table></figure>
<h4 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><p>当您完成工作并且想退出虚拟环境时，可以运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<p>这些步骤将帮助您在 Ubuntu 上创建 Python 虚拟环境。虚拟环境的名称和目录可以根据您的喜好进行更改。</p>
<h3 id="Conda创建虚拟环境"><a href="#Conda创建虚拟环境" class="headerlink" title="Conda创建虚拟环境"></a>Conda创建虚拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create --name myenv</span><br><span class="line">source activate myenv</span><br><span class="line">conda install numpy pandas</span><br><span class="line">source deactivate</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>make及cmake简单使用</title>
    <url>/2023/05/16/MakeFile/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/8dc048ae1e11">A simple task to use <code>Make</code></a></p>
<p>Make的规则</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">test(目标文件): prog.o code.o(依赖文件列表)</span></span><br><span class="line">tab(一个tab来隔开) gcc prog.o code.o -o test(命令)</span><br></pre></td></tr></table></figure>
<p>生成MakeFile文件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">test: prog.o code.o</span></span><br><span class="line">        gcc prog.o code.o -o test</span><br><span class="line"><span class="section">prog.o: prog.c code.h</span></span><br><span class="line">        gcc -c prog.c -o prog.o</span><br><span class="line"><span class="section">code.o: code.c code.h</span></span><br><span class="line">        gcc -c code.c -o code.o</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        rm -f *.o test</span><br></pre></td></tr></table></figure>
<p>使用make命令执行Makefile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">gcc prog.o code.o -o test</span><br><span class="line">gcc -c code.c -o code.o</span><br><span class="line">gcc prog.o code.o -o test</span><br><span class="line"></span><br><span class="line">./test</span><br><span class="line"></span><br><span class="line">//清除.o和test文件</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure>
<h3 id="以下非常感谢-Eric2i的MakeFile项目结构"><a href="#以下非常感谢-Eric2i的MakeFile项目结构" class="headerlink" title="以下非常感谢@Eric2i的MakeFile项目结构"></a>以下非常感谢<a href="https://github.com/Eric2i">@Eric2i</a>的MakeFile项目结构</h3><p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202305162058096.png" alt=""></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC=g++</span><br><span class="line">CFLAGS=-Wall -std=c++17  -Wno-sign-compare</span><br><span class="line">BINDIR=bin</span><br><span class="line">OBJDIR=obj</span><br><span class="line">SRCDIR=src</span><br><span class="line"></span><br><span class="line"><span class="variable">$(OBJDIR)</span>/%.o: <span class="variable">$(SRCDIR)</span>/%.cpp</span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BINDIR)</span>/exec: <span class="variable">$(OBJDIR)</span>/main.o <span class="variable">$(OBJDIR)</span>/grammar.o </span><br><span class="line">	<span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">test: <span class="variable">$(BINDIR)</span>/exec</span></span><br><span class="line">	<span class="variable">$(BINDIR)</span>/exec</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(OBJDIR)</span>/*</span><br><span class="line">	rm -rf <span class="variable">$(BINDIR)</span>/*</span><br></pre></td></tr></table></figure>
<p>自备本地cmake！<br><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.25)</span><br><span class="line">project(Course_compiler)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_COMPILER <span class="string">&quot;D:/university/C++/mingw64/bin/g++.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line">set(CMAKE_C_COMPILER <span class="string">&quot;D:/university/C++/mingw64/bin/gcc.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line">add_executable(Course_compiler src/main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmake -G&quot;MinGW Makefiles&quot;</span></span><br><span class="line"><span class="comment"># ./Course_Compiler</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>git简单使用</title>
    <url>/2023/05/11/git%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li><p>将项目克隆到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone + 项目地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件提交到本地仓库</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span> + 文件名</span><br><span class="line">git status 查看文件状态</span><br><span class="line">git <span class="keyword">commit</span> -m &quot;说明&quot;-提交修改</span><br></pre></td></tr></table></figure>
</li>
<li><p>推送到远程仓库</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">git remote -v 查看远程仓库</span><br><span class="line">git <span class="built_in">push</span> 推送到远程仓库</span><br></pre></td></tr></table></figure>
</li>
<li><p>版本回退</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">log</span> 会看到你之前的<span class="keyword">commit</span> id</span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard + commit id 就可以回到当时的状态</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分支操作</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> branch <span class="number">0</span>.<span class="number">1</span> 创建了一个名为<span class="number">0</span>.<span class="number">1</span>的分支</span><br><span class="line"><span class="attribute">git</span> branch <span class="number">0</span>.<span class="number">2</span> 创建了一个名为<span class="number">0</span>.<span class="number">2</span>的分支</span><br><span class="line"></span><br><span class="line"><span class="attribute">git</span> checkout <span class="number">0</span>.<span class="number">2</span> 切换到<span class="number">0</span>.<span class="number">2</span>分支</span><br><span class="line"><span class="attribute">git</span> checkout main 切换到主分支（可能是master）</span><br><span class="line"></span><br><span class="line"><span class="attribute">git</span> merge <span class="number">1</span> <span class="number">2</span> 合并两个分支</span><br></pre></td></tr></table></figure>
</li>
<li><p>fork</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v  查看当前仓库</span><br><span class="line">git remote add upstream + 库链接 添加上游代码库</span><br><span class="line">git fetch upstream 从上游更新代码库</span><br><span class="line">git merge upstream/main 将最新代码合并到本地的主分支</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>上游更新后重新使用分支：</p>
<p>首先，从远程存储库拉取最新的更改，以确保您在本地有最新版本的main分支。您可以使用以下命令拉取远程存储库的最新更改：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git pull origin <span class="selector-tag">main</span></span><br></pre></td></tr></table></figure>
<p>接下来，切换到v0.1分支。您可以使用以下命令切换到v0.1分支：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout v0.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>然后，将v0.1分支合并到main分支中。您可以使用以下命令将v0.1分支合并到main分支中：</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">merge</span> main</span><br></pre></td></tr></table></figure>
<p>最后，将本地的更改推送到远程存储库。您可以使用以下命令将本地更改推送到远程存储库：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> v0<span class="number">.1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PartⅡ Spring5.3.1</title>
    <url>/2022/11/12/SpringFramework/</url>
    <content><![CDATA[<h2 id="Spring-简介"><a href="#Spring-简介" class="headerlink" title="Spring 简介"></a>Spring 简介</h2><h3 id="Spring-概述"><a href="#Spring-概述" class="headerlink" title="Spring 概述"></a>Spring 概述</h3><p>Spring 框架的核心特性就是可以用于开发任何Java程序，但是在JEE平台上构建web应用长须是需要扩展的。</p>
<h3 id="Spring-家族"><a href="#Spring-家族" class="headerlink" title="Spring 家族"></a>Spring 家族</h3><p><a href="https://spring.io/projects">https://spring.io/projects</a></p>
<h3 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h3><blockquote>
<p>所有的Spring框架均是建立在Spring Framework 的基础上的。</p>
</blockquote>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>非侵入式：对原生技术 和 领域模型是零污染。</li>
<li><strong>控制反转IOC</strong>：反转资源获取方向，将自己创建资源、向环境索取资源 → 环境将资源准备好、我们享受资源注入（降低对象与对象的依赖关系）。</li>
<li><strong>面向切面AOP</strong>：在不修改源代码的基础上，将容器内对象替换成代理类，再完成注入 → 增强代码功能。</li>
<li><strong>容器</strong>：SpringIOC是一个容器，因为它包含并且管理组件的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大降低了使用门槛。</li>
<li>声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现的。</li>
<li>组件化：组件即放在容器当中bean，并且使用注入完整组件的组装。</li>
<li>一站式：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的地方库。而且Spring家族系列已经覆盖了广泛的领域，很多方面的功能性需求可以在Spring Framework 的基础上全部使用Spring 来实现</li>
</ul>
<h4 id="五大功能模块-（仅仅是Spring-Framework）"><a href="#五大功能模块-（仅仅是Spring-Framework）" class="headerlink" title="五大功能模块 （仅仅是Spring Framework）"></a>五大功能模块 （仅仅是Spring Framework）</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>功能模块</strong></td>
<td><strong>功能介绍</strong></td>
</tr>
<tr>
<td>Core Container</td>
<td>核心容器、在Spring环境下使用任何功能都必须基于IOC容器。</td>
</tr>
<tr>
<td>AOP &amp; Aspects</td>
<td>面向切面编程</td>
</tr>
<tr>
<td>Testing</td>
<td>提供了对Junit 或 TestNG 测试框架的整合</td>
</tr>
<tr>
<td>Data Access / Integration</td>
<td>提供了对数据访问/集成的功能 （<strong>SpringJDBC</strong>）</td>
</tr>
<tr>
<td>Spring MVC</td>
<td>提供了面向Web应用程序的集成功能</td>
</tr>
</tbody>
</table>
</div>
<h2 id="IOC-最重要"><a href="#IOC-最重要" class="headerlink" title="IOC(最重要!!!)"></a>IOC(<font color='red'>最重要!!!</font>)</h2><h3 id="IOC思想"><a href="#IOC思想" class="headerlink" title="IOC思想"></a>IOC思想</h3><blockquote>
<p><strong>以前</strong>：使用什么资源需要自行创建，创建的细节也需要自己了解。 <strong>现在</strong>：现在需要使用什么资源，声明一下即可，IOC会自动向声明位置注入资源。（容器推送资源给需要的组件，整合包里面会自动提供资源的创建方式，程序员不用在处理了。）</p>
<p><strong>DI</strong>：依赖注入、是IOC的另一种表述方式、是IOC的具体实现，比如  setter方式接受容器资源的注入。</p>
</blockquote>
<h3 id="IOC在Spring中的实现"><a href="#IOC在Spring中的实现" class="headerlink" title="IOC在Spring中的实现"></a>IOC在Spring中的实现</h3><blockquote>
<p><strong>方式一</strong>：BeanFactory ，IOC容器的基本实现，是Spring内部使用的接口。面向Spring本身，不提供给开发人员使用。</p>
<p><strong>方式二</strong>：ApplicationContext，BeanFactory的子接口，提供了更多高级的特性。面向Spring的使用者的，几乎所有场合都使用ApplicationContext，而不是底层的BeanFactory。 </p>
<p>子类 ClassPathXmlApplicationContext 使用的是最多的。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202211091902512.png" alt="img"></p>
<h2 id="基于XML管理Bean（重要）"><a href="#基于XML管理Bean（重要）" class="headerlink" title="基于XML管理Bean（重要）"></a>基于XML管理Bean（重要）</h2><blockquote>
<p>依然很重要，因为可能第三方类库没有Spring整合包，也就是我们自己注入类库组件，注解方式是行不通，因此只能使用XML的方式。</p>
</blockquote>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>导入项目依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MybatisDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>19<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>19<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建Spring配置文件，将需要注入的bean配置到里面 </p>
<p><strong>位置</strong>：src/main/resources/applicationContext.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id : 区分不同的组件, 且IOC容器根据id获取组件</span></span><br><span class="line"><span class="comment">        默认单例模式</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以在test文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.spring.pojo.HelloWorld;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建IOC容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取IOC容器中的Bean对象</span></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ioc.getBean(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">        helloworld.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bean的"><a href="#Bean的" class="headerlink" title="Bean的"></a>Bean的</h3><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h4 id="lt-bean-gt"><a href="#lt-bean-gt" class="headerlink" title="&lt;bean&gt;"></a><code>&lt;bean&gt;</code></h4><blockquote>
<p>一般的 bean 使用 <bean> 标签注册即可，看上方搭建项目里面即可</p>
</blockquote>
<h5 id="lt-util-list-gt"><a href="#lt-util-list-gt" class="headerlink" title="&lt;util:list&gt;"></a><code>&lt;util:list&gt;</code></h5><blockquote>
<p>注册 集合类型的 bean</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个集合类型的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;studentList&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="获取Bean的三种方式"><a href="#获取Bean的三种方式" class="headerlink" title="获取Bean的三种方式"></a>获取Bean的三种方式</h3><blockquote>
<p>根据 id，类型，id + 类型获取的三种方式</p>
<p><strong>根据类型获取注意点</strong>：当容器当中有多个相同类型的Bean的时候就GG了。 → <code>NoUniqueBeanDefinitionException</code> ( <strong>这个最常用，就用这个</strong> )</p>
<p><strong>id + 类型的方式</strong>：id 和 类型组合起来唯一就行啦。</p>
</blockquote>
<p>‼️ 组件实现了接口，同样可以使用接口的类型获得组件，<font color='red'>但前提是Bean唯一。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Student implements Person</span></span><br><span class="line"><span class="comment">// &lt;bean id=&quot;student&quot; class=&quot;com.atguigu.spring.pojo.Student&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> ioc.getBean(Person.class);</span><br></pre></td></tr></table></figure>
<h3 id="依赖注入详解"><a href="#依赖注入详解" class="headerlink" title="依赖注入详解"></a>依赖注入详解</h3><blockquote>
<p>首先简单介绍分两类，其次介绍各种类型数据如何注入。</p>
</blockquote>
<p>类似于java中的setter和getter方法，给类的属性赋值</p>
<h4 id="setter-注入（用的最多）"><a href="#setter-注入（用的最多）" class="headerlink" title="setter 注入（用的最多）"></a>setter 注入（用的最多）</h4><blockquote>
<p>setter 注入 和 set方法有关，跟成员变量没有关系。<font color="red">使用property方法</font></p>
</blockquote>
<p>理解：对<code>com.atguigu.spring.pojo.Student</code>类的sname属性赋值为“张三”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- setter 注入 和 set方法有关，跟成员变量没有关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="构造器注入（与对象的构造器类似）"><a href="#构造器注入（与对象的构造器类似）" class="headerlink" title="构造器注入（与对象的构造器类似）"></a>构造器注入<font color='red'>（与对象的构造器类似）</font></h4><blockquote>
<p>根据 <constructor-arg> 标签的顺序来决定调用那个构造参数，name 属性不要省（虽然可以省）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public Student(Integer sid, String sname, Integer age, String gender) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="各种类型如何注入"><a href="#各种类型如何注入" class="headerlink" title="各种类型如何注入"></a>各种类型如何注入</h4><h5 id="字面量注入"><a href="#字面量注入" class="headerlink" title="字面量注入"></a>字面量注入</h5><blockquote>
<p>字面量包含 基本数据类型、String、包装类型</p>
<p><strong>String 赋值 null</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特殊字符，可以使用转义，或 CDATA区</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[ a&gt;b ]]&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<h5 id="为类-接口类型的属性复制"><a href="#为类-接口类型的属性复制" class="headerlink" title="为类/接口类型的属性复制"></a>为类/接口类型的属性复制</h5><blockquote>
<p><strong>ref方式</strong>：如下：Student类含有一个Course成员，且提供了setter.</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;courseOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- void setCourse(Course course) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;course&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;courseOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>内部bean的方式</strong>：但是IOC不能获取到内部Bean了。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- void setCourse(Course course) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;course&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;courseOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Course&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><blockquote>
<p>如果是字面量类型则用 value，如果是类类型则用 ref</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- String[] hobby; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 类类型用 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;ref bean=&quot;id&quot;&gt;&lt;/ref&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="List集合（两种方式）"><a href="#List集合（两种方式）" class="headerlink" title="List集合（两种方式）"></a>List集合（两种方式）</h5><blockquote>
<p><strong>方式一</strong>：Property标签内部设置，字面量类型用 value，类类型用 ref</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- List&lt;Student&gt; students --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>方式二</strong>：或者从List类型的bean 注入</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- List&lt;Student&gt; students --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个集合类型的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;studentList&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="Map-集合（两种方式）"><a href="#Map-集合（两种方式）" class="headerlink" title="Map 集合（两种方式）"></a>Map 集合（两种方式）</h5><blockquote>
<p><strong>方式一</strong>：Property标签内部设置 </p>
<p>键是字面量类型则用 key 属性，类类型则用 key-ref</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Teacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Teacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Map&lt;String, Teacher&gt; teacherMap; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacherOne&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacherTwo&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>方式二：或者从Map类型的bean 注入</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacherOne&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacherTwo&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Map&lt;String, Teacher&gt; teacherMap; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Xml-Druid数据源"><a href="#Xml-Druid数据源" class="headerlink" title="Xml Druid数据源"></a>Xml Druid数据源</h3><p>如连接mybatis、sql等都是需要导入依赖的，mysql相关依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据源依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><p>基本连接mysql方法的配置文件编写如下<code>spring-datasource.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassLoader&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3307/ssm?serverTimezone=UTC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19842100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以编写测试函数，本地连接数据库成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-datasource.xml&quot;</span>);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ioc.getBean(DruidDataSource.class);</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h4><p>编写<code>jdbc.properties</code>文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3307/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">19842100</span></span><br></pre></td></tr></table></figure>
<p>然后再引入jdbc.properties文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jdbc.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 : 其实添加的是其一个实现类  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 连接池最大活跃连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="bean的作用域Scope"><a href="#bean的作用域Scope" class="headerlink" title="bean的作用域Scope"></a>bean的作用域Scope</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>取值</strong></td>
<td><strong>含义</strong></td>
<td><strong>创建对象时机</strong></td>
</tr>
<tr>
<td>singleton（默认）</td>
<td>在IOC容器中，这个bean的对象始终为单例</td>
<td>容器初始化的时候创建</td>
</tr>
<tr>
<td>prototype</td>
<td>原型模式，获取创建的都是新的对象</td>
<td>从容器当中获取的时候创建</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>如果是<code>WebApplicationContext</code>环境下（Web应用），还有另外两个作用域（但不常用）</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>取值</strong></td>
<td><strong>含义</strong></td>
</tr>
<tr>
<td>request</td>
<td>在一个请求范围内有效</td>
</tr>
<tr>
<td>prototype</td>
<td>在一个会话范围内有效</td>
</tr>
</tbody>
</table>
</div>
<h3 id="bean的生命周期（重要）"><a href="#bean的生命周期（重要）" class="headerlink" title="bean的生命周期（重要）"></a>bean的生命周期<font color='red'>（重要）</font></h3><p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202211151137617.png" alt="image-20221115113717785"></p>
<h3 id="前-后置处理器（简单了解）"><a href="#前-后置处理器（简单了解）" class="headerlink" title="前/后置处理器（简单了解）"></a>前/后置处理器（简单了解）</h3><blockquote>
<p>生命周期 调用 初始化方法的前后 加入额外的处理代码 ‼️ 容器只能配置一个后置处理器, 针对所有的Bean进行处理。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之前调用 --&gt; postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之后调用 --&gt; postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.atguigu.spring.pojo.User&quot;</span> init-method=<span class="string">&quot;initMethod&quot;</span> destroy-method=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span><br><span class="line">    &lt;!-- setter 依赖注入 --&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;张三&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 后置处理器配置 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;myBeanPostProcessor&quot;</span> class=<span class="string">&quot;com.atguigu.spring.processor.MyBeanPostProcessor&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h4 id="作用域对生命周期的影响"><a href="#作用域对生命周期的影响" class="headerlink" title="作用域对生命周期的影响"></a>作用域对生命周期的影响</h4><blockquote>
<p>Singleton : 容器创建后立马的执行123， 后续获取直接从4开始，容器关闭调用5 prototype：从容器中获取bean则1, 2, 3, 4 执行，容器关闭不会执行5 , 此作用域对象销毁方法需要用户自己处理。</p>
</blockquote>
<h4 id="FactoryBean-（了解-会用）"><a href="#FactoryBean-（了解-会用）" class="headerlink" title="FactoryBean （了解/会用）"></a>FactoryBean （了解/会用）</h4><blockquote>
<p>将工厂作为Bean配置到IOC容器当中去，进而可以直接使用IOC容器获得Bean，而不是先获得 Factory. ‼️ 真正交给IOC管理的对象是其从Factory当中返回的bean对象. ‼️ 也就是说 Bean 的创建交给了 FactoryBean ，而FactoryBean 则交给了IOC创建.</p>
</blockquote>
<p><strong>好处</strong>：Bean的创建很复杂，使用XML完成创建很麻烦</p>
<blockquote>
<p>FactoryBean</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.factory.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-factoryBean.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ioc.getBean(User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基于XML的自动装配（重要）"><a href="#基于XML的自动装配（重要）" class="headerlink" title="基于XML的自动装配（重要）"></a>基于XML的自动装配（重要）</h4><blockquote>
<p>注入<strong>类类型</strong>（字面量的不行）的时候，XML文件中不在写Property标签和 ref 属性完成注入。</p>
<p>下方演示的将 Service使用自动装配的方式注入到 Controller 中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserService <span class="title function_">getUserService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean id=<span class="string">&quot;controller&quot;</span> class=<span class="string">&quot;com.atguigu.spring.controller.UserController&quot;</span> autowire=<span class="string">&quot;byType&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;userService&quot;</span> class=<span class="string">&quot;com.atguigu.spring.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上方演示的是beType (<strong>用的最多</strong>) 方式，其会去容器当中找 UserService 的实现类， </p>
<p>a) 如果找不到则不装配. </p>
<p>b) 如果找到多个会报 <strong>noUniqueBeanDefinitionException</strong>。</p>
<p>byName 基本用不到，我们不用管啦，因为在开发中一个类型的组件只会向容器当中放一次. 当容器当中有多个相同类型能匹配到的时候，可以使用byName进行区分。</p>
</blockquote>
<h2 id="基于注解管理bean（重要）"><a href="#基于注解管理bean（重要）" class="headerlink" title="基于注解管理bean（重要）"></a>基于注解管理bean<font color='red'>（重要）</font></h2><h3 id="注册Bean-的注解（四个）"><a href="#注册Bean-的注解（四个）" class="headerlink" title="注册Bean 的注解（四个）"></a>注册Bean 的注解（四个）</h3><h4 id="四个注解及其关系"><a href="#四个注解及其关系" class="headerlink" title="四个注解及其关系"></a>四个注解及其关系</h4><blockquote>
<p>@Component : 将类标识为普通组件 </p>
<p>@Controller：将类标识为控制层组件 </p>
<p>@Service：将类标识为业务层组件 </p>
<p>@Repository: 将类标识为持久层组件</p>
</blockquote>
<p>‼️ 这四个注解功能一摸一样 ， 只是给开发人员看（代码可读性），让开发人员区分组件的功能。</p>
<blockquote>
<p>四个注解之间的关系 ：均有 @Component 扩展出来</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202211151648870.png" alt="img"></p>
<h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><blockquote>
<p>id不写的时候默认是小驼峰，比如 UserController 加上 @Controller 注解以后，其在容器的id就是 <code>userController</code>。</p>
<p><strong>自定义id</strong>：<code>@Controller(&quot;userController&quot;)</code></p>
</blockquote>
<h3 id="扫描组件"><a href="#扫描组件" class="headerlink" title="扫描组件"></a>扫描组件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>排除扫描</strong>：排除对某些包下的组件的扫描</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        type: annotation -&gt; 根据注解排除</span></span><br><span class="line"><span class="comment">              assignable -&gt; 根据类类型进行排除</span></span><br><span class="line"><span class="comment">        如下排除掉控制层的组件</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>包含扫描</strong>：只对某些包下的某些组件的扫描</p>
</blockquote>
<p><code>use-default-filters=&quot;ture&quot;</code> ：表示包下的所有的类都需要扫描，需要关掉(false)才能使用包含扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        type: annotation -&gt; 根据注解只扫描</span></span><br><span class="line"><span class="comment">              assignable -&gt; 根据类类型只扫描</span></span><br><span class="line"><span class="comment">        如下只扫描控制层的组件</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自动装配注解"><a href="#自动装配注解" class="headerlink" title="自动装配注解"></a>自动装配注解</h3><blockquote>
<p>Autowire、Qualifier</p>
</blockquote>
<h4 id="放置位置"><a href="#放置位置" class="headerlink" title="放置位置"></a>放置位置</h4><blockquote>
<p><strong>放在成员变量上</strong>：则Spring会使用暴力反射的方式完成私有属性输入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>放在 setter 方法上</strong>：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setService</span><span class="params">(UserService service)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>放在有参构造上</strong>：代码就不演示了，使用第一种即可啦。</p>
</blockquote>
<h4 id="Autowire-注解的原理"><a href="#Autowire-注解的原理" class="headerlink" title="@Autowire 注解的原理"></a>@Autowire 注解的原理</h4><blockquote>
<p>a )  默认通过 byType 的方式，在IOC容器中通过类型匹配某个bean为属性赋值。 b)  当有多个 bean 的类型能匹配到，其会转换为 byName 的方式，其 匹配名称为属性名。 c)  当有多个 bean 的类型能匹配到，但未找到id相同的，则报 <strong>noUniqueBeanDefinationException</strong>.</p>
</blockquote>
<h4 id="Qualifier-注解原理"><a href="#Qualifier-注解原理" class="headerlink" title="@ Qualifier 注解原理"></a>@ Qualifier 注解原理</h4><blockquote>
<p>当发生 @Autowire 的 c) 的情况的收，可以自己指定bean的id</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="NoSuchBeanDefinationException"><a href="#NoSuchBeanDefinationException" class="headerlink" title="NoSuchBeanDefinationException"></a>NoSuchBeanDefinationException</h4><blockquote>
<p>当匹配不到Bean完成自动装配的时候，会报 <strong>NoSuchBeanDefinationException</strong> 的错误。当 修改 为 <code>@Autowire(required = false)</code> 的时候，找不到Bean完成自动装配则使用默认值，和使用XML自动装配的时候的情况一样。</p>
</blockquote>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><blockquote>
<p><strong>代理</strong>：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。 <strong>目标</strong>：被代理”套用”了非核心逻辑的类、对象、方法。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202211152103004.png" alt="image-20221115210313613" style="zoom:33%;" /></p>
<h3 id="动态代理（重点-JDK和cglib区别）"><a href="#动态代理（重点-JDK和cglib区别）" class="headerlink" title="动态代理（重点:JDK和cglib区别）"></a>动态代理（重点:JDK和cglib区别）</h3><blockquote>
<p>不用自己创建代理类 java 文件（静态代理），而是使用java 提供的API生成任意目标类的代理类。 </p>
<p><strong>优点</strong>：1. 不用创建过多代理类文件。 2. 静态代理实现的接口的每个方法都需要手动添加增强代码，而动态代理只用添加一次。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Object proxyedObject)</span> &#123;</span><br><span class="line">            target = proxyedObject;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="comment">// todo: 执行前添加代码位置 </span></span><br><span class="line">              </span><br><span class="line">              <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">              </span><br><span class="line">              <span class="comment">// todo: 执行后添加代码位置</span></span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            </span><br><span class="line">              <span class="comment">// todo: 发生异常的位置</span></span><br><span class="line">              e.printStackTrace();</span><br><span class="line">            </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">// todo: finally 位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(<span class="keyword">final</span> Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">new</span> <span class="title class_">Handler</span>(target));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AOP-1"><a href="#AOP-1" class="headerlink" title="AOP"></a>AOP</h3><blockquote>
<p><strong>概述</strong>:是一种思想, 面向切面编程, 是<strong>面向对象编程的一种补充和完善</strong> , 它以通过预编译的方式和运行期动态代理的方式实现在<strong>不修改源代码的情况下</strong>给程序动态统一添加额外功能的一种技术.</p>
</blockquote>
<h4 id="相关术语-重点理解"><a href="#相关术语-重点理解" class="headerlink" title="相关术语 ( 重点理解 )"></a>相关术语 ( 重点理解 )</h4><blockquote>
<p><strong>横切关注点</strong> : 被代理类抽取的非核心业务<strong>代码</strong>;</p>
<p><strong>通知</strong> :每个 <strong>横切关注点</strong> 都需要对应一个方法实现, 这样的切面类<strong>方法</strong>就叫通知方法.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202211152137866.png" alt="img" style="zoom: 67%;" /></p>
<p>‼️ 后置通知 和 返回 通知的区别 : 前者是 try { } 内部方法调用成功返回后 , 而后置通知是 finally { } 里面的代码.</p>
<blockquote>
<p><strong>切面</strong> ( <strong>最重要</strong> ):<strong>封装横切关注点</strong>的类 , 就叫切面 或 封装<strong>通知方法</strong>类就叫切面.</p>
<p><strong>目标</strong> : 被代理的目标<strong>对象</strong>.</p>
<p><strong>代理</strong> : 向目标对象应用通知之后创建的<strong>代理对象</strong>. ( 不需要我们自己创建, 而是 AOP 帮我们创建 )</p>
<p><strong>连接点</strong> (逻辑概念): 横切关注点 被 抽取的<strong>位置</strong>.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202211152138755.png" alt="img"></p>
<blockquote>
<p><strong>切入点</strong> : 本质就是个<strong>表达式</strong> ,  起到定位链接点的作用 ,  将 表达式 注解到 通知上面 , 进而作用到表示的连接点上面.</p>
</blockquote>
<p>‼️ <strong>总结</strong> : <strong>AOP 重点编写切面类</strong> ( 先抽取代码 )，通过<strong>切点表达式声明的方式</strong> ( 再套到目标类上 )告诉Spring框架我要将我注解到的通知应用到那个类的那个连接点上。</p>
<h4 id="AOP的作用"><a href="#AOP的作用" class="headerlink" title="AOP的作用"></a>AOP的作用</h4><blockquote>
<p><strong>简化代码</strong> : 具有重复性( 多个类的相同位置 )的非核心业务代码抽取 , 让目标类当中仅剩下简洁的核心业务代码.</p>
<p><strong>代码增强</strong> : 需要切面类里面功能, 直接套上去就增强目标类的代码了.</p>
</blockquote>
<h4 id="基于注解实现AOP-重点"><a href="#基于注解实现AOP-重点" class="headerlink" title="基于注解实现AOP (重点)"></a>基于注解实现AOP (重点)</h4><h5 id="A-技术说明"><a href="#A-技术说明" class="headerlink" title="A. 技术说明"></a>A. 技术说明</h5><blockquote>
<p>JDK 动态代理 和 cglib 的区别在 <code>5.2</code> 中已经给出说明.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202211152149455.png" alt="img"></p>
<blockquote>
<p><strong>AspectJ</strong> : 本质上是静态代理, 将代理逻辑”织入” 被代理的目标类编译得到的字节码文件, 所以最终效果是动态. <strong>weaver 就是织入器.</strong> <strong>Spring 只是借用了 AspectJ 中的注解</strong>.</p>
</blockquote>
<h5 id="B-添加依赖"><a href="#B-添加依赖" class="headerlink" title="B. 添加依赖"></a>B. 添加依赖</h5><blockquote>
<p>‼️ 在IOC 所需依赖 ( <code>spring-context</code> ) 基础上再加入下面依赖即可:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="C-创建切面类并配置"><a href="#C-创建切面类并配置" class="headerlink" title="C. 创建切面类并配置(**)"></a>C. 创建切面类并配置(**)</h5><blockquote>
<p>实现个日志的切面类 .</p>
</blockquote>
<ol>
<li>切面类 和 目标类都要注册到 容器  → @Component 组件修饰.</li>
<li>切面类必须通过 @Aspect 注解标识为一个切面</li>
<li>在Spring的配置文件中开启aop 注解功能 <code>&lt;aop:aspectj-autoproxy/&gt;</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类 : 需要注册到IOC容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 将组件标识为 切面 组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Before(&quot;execution(public int com.atguigu.spring.aop.anno.Calculator.add(int, int))&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被增强类的所有的方法</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.atguigu.spring.aop.anno.Calculator.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;前置方法通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:util=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/util</span></span><br><span class="line"><span class="string">       https://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        AOP 切面类 和 目标类都需要交给 IOC 容器管理</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.atguigu.spring.aop&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启基于注解的AOP功能 --&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<h5 id="D-获取链接点的方法信息"><a href="#D-获取链接点的方法信息" class="headerlink" title="D. 获取链接点的方法信息"></a>D. 获取链接点的方法信息</h5><blockquote>
<p>添加JoinPoint 参数即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 将组件标识为 切面 组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写的太死了</span></span><br><span class="line">    <span class="comment">// @Before(&quot;execution(public int com.atguigu.spring.aop.anno.Calculator.add(int, int))&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被增强类的所有的方法</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.atguigu.spring.aop.anno.Calculator.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(joinPoint.getSignature().getName());  <span class="comment">// 获取方法名称</span></span><br><span class="line">        Object[] args = joinPoint.getArgs(); <span class="comment">// 获取连接点的参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="E-切入点表达式的重用"><a href="#E-切入点表达式的重用" class="headerlink" title="E.切入点表达式的重用"></a>E.<strong>切入点表达式的重用</strong></h5><blockquote>
<p>创建一个没有任何作用的方法, 用来放置公共的切断点表达式.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 将组件标识为 切面 组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.atguigu.spring.aop.anno.Calculator.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="F-返回通知获得返回值"><a href="#F-返回通知获得返回值" class="headerlink" title="F. 返回通知获得返回值"></a>F. 返回通知获得返回值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdviceMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;返回通知, 且返回值为 : &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="G-异常通知获取异常"><a href="#G-异常通知获取异常" class="headerlink" title="G. 异常通知获取异常"></a>G. 异常通知获取异常</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdviceMethod</span><span class="params">(JoinPoint joinPoint, Exception ex)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;发生异常&quot;</span> + ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="H-环绕通知"><a href="#H-环绕通知" class="headerlink" title="H. 环绕通知"></a>H. 环绕通知</h5><blockquote>
<p>相当于手动实现动态代理，能代替前面四种通知，且能与前面4种通知共存。<strong>一般设置了前面的通知后，就没必要设置环绕通知啦</strong>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> proceedingJoinPoint 可执行的连接点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdviceMethod</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知 --&gt; 前置通知&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知 --&gt; 返回通知&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知 --&gt; 异常通知&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知 --&gt; 后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="I-各种通知的执行顺序"><a href="#I-各种通知的执行顺序" class="headerlink" title="I. 各种通知的执行顺序"></a>I. 各种通知的执行顺序</h5><blockquote>
<p>Spring 5.3.x 版本以前</p>
</blockquote>
<p>前置通知 → 目标操作 → 后置通知 → 返回通知/异常通知</p>
<blockquote>
<p>Spring 5.3.x 版本以后 （ 当前笔记所作的版本 ）</p>
</blockquote>
<p>前置通知 → 目标操作 → 返回通知 / 异常通知 → 后置通知</p>
<h5 id="J-切面优先级"><a href="#J-切面优先级" class="headerlink" title="J.切面优先级"></a>J.切面优先级</h5><blockquote>
<p>只需要使用注解 <code>@Order</code> 在切面类的注解上即可，数值越小优先级越高。且默认值是 INT_MAX</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>     <span class="comment">// 将组件标识为 切面 组件</span></span><br><span class="line"><span class="meta">@Order(1)</span>   <span class="comment">// 设置切面的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.atguigu.spring.aop.anno.Calculator.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JDBCTemplate-了解"><a href="#JDBCTemplate-了解" class="headerlink" title="JDBCTemplate(了解)"></a>JDBCTemplate(了解)</h3><blockquote>
<p><strong>是什么</strong>：Spring 对 JDBC 进行封装，使用JdbcTemplate 方便实现数据库操作.</p>
</blockquote>
<h4 id="A-依赖："><a href="#A-依赖：" class="headerlink" title="A.依赖："></a>A.<strong>依赖</strong>：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring 核心: IOC 的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring jdbc 和 spring-tx 事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring 整合Junit 的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="B-注册JdbcTemplate"><a href="#B-注册JdbcTemplate" class="headerlink" title="B. 注册JdbcTemplate"></a>B. 注册JdbcTemplate</h4><blockquote>
<p>druid 数据源配置可以看上方的 笔记</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jdbc.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 : 其实添加的是其一个实现类  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连接池设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 连接池最大活跃连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册 JDBCTemplate : 第三方Jar包使用不了注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="C-测试-spring-test"><a href="#C-测试-spring-test" class="headerlink" title="C. 测试 spring-test"></a>C. 测试 spring-test</h4><blockquote>
<p>spring 和 junit 的整合包，可以让测试环境直接在IOC容器中开始，不用每次测试去创建IOC容器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 指定测试环境的核心配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:jdbc-application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入 JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">jdbcTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;jdbc-application.xml&quot;</span>);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ioc.getBean(DruidDataSource.class);</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;jdbc-application.xml&quot;</span>);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ioc.getBean(DruidDataSource.class);</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user VALUES (null, ?, ?, ?, ?, ?);&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">23</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询单个对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM t_user WHERE id = ?&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), <span class="number">5</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM user&quot;</span>;</span><br><span class="line">        List&lt;User&gt; users = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单行单列查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT count(*) from user&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>PartⅠ Mybatis面向接口编程</title>
    <url>/2022/11/07/Mybatis/</url>
    <content><![CDATA[<font color='red'>*编写顺序：properties->mybatis-config.xml,mapper接口->对应的xml,mybatis-config.xml引入对应mapper映射的映射包文件*</font>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul>
<li>Apache 的 开源项目 ibatis → 后成为 MyBatis。</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li><strong>定制化SQL</strong>：即可以自己手写SQL语句。</li>
<li><strong>支持存储过程</strong></li>
<li><strong>支持高级映射</strong>：即POJO和数据库字段的映射方式可以自定义哦。</li>
<li>封装了JDBC代码，和结果集的处理过程 → 不用手写JDBC代码和结果集处理的过程啦。</li>
</ul>
<h2 id="官方下载-amp-文档"><a href="#官方下载-amp-文档" class="headerlink" title="官方下载&amp;文档"></a>官方下载&amp;文档</h2><p><a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p>
<h3 id="VS其他持久层框架"><a href="#VS其他持久层框架" class="headerlink" title="VS其他持久层框架"></a>VS其他持久层框架</h3><ul>
<li><p>JDBC：</p>
<p>对于已经打包部署的项目，需要重新编辑代码再打包部署，非常麻烦。</p>
</li>
<li><p>Hibernate 和 JPA</p>
</li>
<li><p>MyBatis</p>
<p><strong>xml 中编写SQL语句</strong>。</p>
</li>
</ul>
<h2 id="快速开始（简单介绍各个部分）"><a href="#快速开始（简单介绍各个部分）" class="headerlink" title="快速开始（简单介绍各个部分）"></a>快速开始（简单介绍各个部分）</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li><strong>IDE</strong>：IDEA:  2022.2</li>
<li><strong>构建工具</strong>：maven 3.8.6</li>
<li><strong>MySQL版本</strong>：MySQL8</li>
<li><strong>MyBatis 版本</strong>：MyBatis 3.5.11</li>
</ul>
<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>根据你自己项目的类型创建具体Maven项目即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Mybatis核心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    MySQL驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="核心配置文件（最少配置）"><a href="#核心配置文件（最少配置）" class="headerlink" title="核心配置文件（最少配置）"></a>核心配置文件（最少配置）</h3><p>习惯上命名：mybatis-config.xml，非强制。将来整合Spring的时候可以省略。 <font color='red'>这里目的为了能运行即可，详细配置内容看后续。</font></p>
<p><code>作用</code>：1. 配置链接数据库的环境  2. 配置MyBatis </p>
<p><code>放置位置</code>：src/main/resources</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置链接数据库的环境</span></span><br><span class="line"><span class="comment">        default : 选择那个环境有效</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 数据源 即连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.23.128:3307/ssm?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>characterEncoding=utf-8amp;autoReconnect=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 MyBatis 的映射文件 : 存放SQL语句 和 POJO的映射方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Mapper-接口"><a href="#Mapper-接口" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h3><p>相当于DAO，但是不用创建实现类，MyBatis会创建代理类，并执行映射文件当中的SQL。 </p>
<p><code>起名规则</code>：POJO的名字 + Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><p>Mapper 接口当中的一个抽象方法 对应 映射文件当中的一个SQL语句。 </p>
<p><code>起名规则</code>：POJO名字 + Mapper.xml </p>
<p><code>放置位置</code>：src/main/resources/UserMapper.xml </p>
<p>这里我们写一条固定的插入SQL，参数如何传递请请看后方比较详细的笔记。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace ：对应的mapper接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id : 对应接口的方法名称.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO t_user VALUES (NULL, &#x27;admin&#x27;, &#x27;123456&#x27;, 23, &#x27;男&#x27;, &#x27;12345@qq.com&#x27;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h3><p>下方代码：从开始到创建 SqlSessionFactory 只用创建一次即可，因此可以单独封装即可。 <code>openSession()</code> 获得 <code>SqlSession</code>默认是不自动提交事务，因此需要自己手动提交。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.mybatis.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取核心配置文件的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取SqlSessionFactoryBuilder 对象 -&gt; 工厂构建器</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 SqlSession 工厂 -&gt; 创建会话</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(resourceAsStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 会话 对象 -&gt; MyBatis 提供的操作数据库的对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得Mapper接口的代理类 -&gt; 操纵Mapper类执行数据库操作</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行SQL操作</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交事务 -&gt; 事务是默认开启的</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>日志级别：FATAL（致命）&gt; ERROR（错误）&gt;WARN（警告）INFO（信息）&gt; DEBUG（调试） 从左到右打印的内容越来越详细.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>resources/log4j.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5d %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 默认配置，级别为debug 且根据name为log.console和 log.file两个appender输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h2><h3 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h3><p>可以配置多个环境，比如测试环境和开发环境 ; 使用id区分，不能重复。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- 数据源 即连接池--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.23.128:3306/ssm?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>characterEncoding=utf-8amp;autoReconnect=true&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- 数据源 即连接池--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.23.128:3306/ssm?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>characterEncoding=utf-8amp;autoReconnect=true&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h4><blockquote>
<p>事务管理器，使用type来设置事务管理方式。</p>
</blockquote>
<ul>
<li><p>type:</p>
<p>JDBC：表示使用JDBC原生事务管理方式，即可以手动的开启关闭事务，手动的提交和回滚。</p>
<p>MANAGED：被管理的，例如交给Spring管理。</p>
</li>
</ul>
<h4 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h4><blockquote>
<p>设置数据源，使用type 设置数据源的类型。</p>
</blockquote>
<ul>
<li><p>type</p>
<p>POOLED：使用数据库连接池</p>
<p>UNPOOLED：不使用数据库连接池，链接直接重新创建</p>
<p>JNDI：表示使用上下文当中的数据源（了解下）</p>
</li>
</ul>
<h3 id="引入jdbc-properties"><a href="#引入jdbc-properties" class="headerlink" title="引入jdbc.properties"></a>引入jdbc.properties</h3><p>resources 下创建 jdbc.properties 文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://192.168.23.128:3306/ssm?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;autoReconnect=true</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<p>核心配置文件当中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 properties 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>类型别名，在 Mapper 的 resultType 属性中可以使用简单类型别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 properties 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.mybatis.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 也可以指定一个包下面的别名, 且不区分大小写, 跟上方 typeLias 不能同时使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 Mapper.xml 文件中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM t_user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件基础</title>
    <url>/2022/11/02/vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="定义一个组件"><a href="#定义一个组件" class="headerlink" title="定义一个组件"></a>定义一个组件</h3><p>当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 <code>.vue</code> 文件中，这被叫做<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html">单文件组件</a> (简称 SFC)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h3><p>要使用一个子组件，我们需要在父组件中导入它。假设我们把计数器组件放在了一个叫做 <code>ButtonCounter.vue</code> 的文件中，这个组件将会以默认导出的形式被暴露给<strong>外部</strong>。<code>ButtonCounter.vue</code>编写如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="组件的注册"><a href="#组件的注册" class="headerlink" title="组件的注册"></a>组件的注册</h3><p>一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册。</p>
<h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><p>我们可以使用 <a href="https://cn.vuejs.org/guide/essentials/application.html">Vue 应用实例</a>的 <code>app.component()</code> 方法，让组件在当前 Vue 应用中全局可用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(</span><br><span class="line">  <span class="comment">// 注册的名字</span></span><br><span class="line">  <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">  <span class="comment">// 组件的实现</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果使用单文件组件，你可以注册被导入的 <code>.vue</code> 文件;且<code>app.component()</code> 方法可以被链式调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentA&#x27;</span>, <span class="title class_">ComponentA</span>)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentB&#x27;</span>, <span class="title class_">ComponentB</span>)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentC&#x27;</span>, <span class="title class_">ComponentC</span>)</span><br></pre></td></tr></table></figure>
<h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><p>本人所有项目编写全部使用局部注册方法。</p>
<h3 id="父子传参Props"><a href="#父子传参Props" class="headerlink" title="父子传参Props"></a>父子传参Props</h3><h4 id="Props-声明"><a href="#Props-声明" class="headerlink" title="Props 声明"></a>Props 声明</h4><p>一个组件需要显式声明它所接受的 props，这样 Vue 才能知道外部传入的哪些是 props，哪些是透传 attribute。</p>
<p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，props 可以在子组件中使用 <code>defineProps()</code> 宏来声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;foo&#x27;])</span><br><span class="line"></span><br><span class="line">console.log(props.foo)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>除了使用字符串数组来声明 prop 外，还可以使用对象的形式，<font color='red'>也非常建议使用对象格式，因为Ts只支持这种形式</font>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 &lt;script setup&gt;</span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">likes</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>父子组件的值通过v-bind自定义方法进行传值操作:</p>
<p>父</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ButtonCounter :message=&quot;message&quot;&gt;&lt;/ButtonCounter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ButtonCounter from &#x27;./components/ButtonCounter.vue&#x27;;</span><br><span class="line">const message=ref(&quot;123&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">    const count=ref(0);//定义count为一个值0</span><br><span class="line">    defineProps(&#123;</span><br><span class="line">        message:String</span><br><span class="line">    &#125;)</span><br><span class="line">    function addTime()&#123;</span><br><span class="line">        count=count++;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="组件的事件"><a href="#组件的事件" class="headerlink" title="组件的事件"></a>组件的事件</h3><h4 id="触发事件与监听事件"><a href="#触发事件与监听事件" class="headerlink" title="触发事件与监听事件"></a>触发事件与监听事件</h4><p>在组件的模板表达式中，可以直接使用 <code>$emit</code> 方法触发自定义事件 (例如：在 <code>v-on</code> 的处理函数中)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- MyComponent --&gt;</span><br><span class="line">&lt;button @click=&quot;$emit(&#x27;someEvent&#x27;)&quot;&gt;click me&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>父组件可以通过 <code>v-on</code> (缩写为 <code>@</code>) 来监听事件，同样，组件的事件监听器也支持 <code>.once</code> 修饰符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent @some-event=&quot;callback&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="插槽-Slots"><a href="#插槽-Slots" class="headerlink" title="插槽 Slots"></a>插槽 Slots</h3><h4 id="插槽内容与出口"><a href="#插槽内容与出口" class="headerlink" title="插槽内容与出口"></a>插槽内容与出口</h4><p><code>&lt;slot&gt;</code> 元素是一个<strong>插槽出口</strong> (slot outlet)，标示了父元素提供的<strong>插槽内容</strong> (slot content) 将在哪里被渲染。</p>
<p><img src="https://cn.vuejs.org/assets/slots.dbdaf1e8.png" alt="插槽图示"></p>
<p>插槽内容可以是任意合法的模板内容，不局限于文本。例如我们可以传入多个元素，甚至是组件。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>小白学vue</title>
    <url>/2022/11/02/vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="Vue的导入"><a href="#Vue的导入" class="headerlink" title="Vue的导入"></a>Vue的导入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><p>对id为app的div模块进行文字的<strong>动态输入</strong>，文本插值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一个页面中支持多个组件的挂载，尽量对组件进行挂载而非对整个页面进行挂载。</p>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h4 id="单向数据绑定v-bind（-value-）"><a href="#单向数据绑定v-bind（-value-）" class="headerlink" title="单向数据绑定v-bind（:value=）"></a>单向数据绑定v-bind（:value=）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   单向数据绑定:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> app=<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">message</span>: <span class="string">&quot;123&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">name</span>: <span class="string">&quot;雪狐桑&quot;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;)</span></span><br><span class="line"><span class="language-javascript"> app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202210271321473.png" alt="image-20221027132051566"></p>
<p>数据只能从data流向页面，但是不可以从页面流向data。</p>
<h4 id="双向数据绑定v-model-v-model"><a href="#双向数据绑定v-model-v-model" class="headerlink" title="双向数据绑定v-model(v-model=)"></a>双向数据绑定v-model(v-model=)</h4><p>其他不变v-bind修改为v-model即可实现双向数据绑定。但是v-model只能运用于表单类元素上。</p>
<h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><h4 id="一般的数据代理Object-defineProperty"><a href="#一般的数据代理Object-defineProperty" class="headerlink" title="一般的数据代理Object.defineProperty()"></a>一般的数据代理Object.defineProperty()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;潘潘&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">let</span> number=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;major&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;CS&#x27;</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,<span class="comment">//是否可以枚举</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,<span class="comment">//是否可以被修改</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span><span class="comment">//是否可以被删除</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	<span class="keyword">return</span> number;</span><br><span class="line">	&#125;<span class="comment">//跟随number值修改</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h4><p>vue的data在_data中</p>
<h3 id="事件处理methods"><a href="#事件处理methods" class="headerlink" title="事件处理methods"></a>事件处理methods</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;真可爱，我单推&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">showInfo</span>&gt;</span>点我单推雪狐桑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app=<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;雪狐&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;关注萨摩桑喵，谢谢关注钢板喵&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若需要传参，需要考虑event, 即showInfo($event,…)</p>
<h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>修饰符是可以连续写的。</p>
<p>1、阻止默认事件（常用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、阻止事件冒泡（常用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.stop</span>=<span class="string">showInfo</span>&gt;</span>点我单推雪狐桑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、事件只触发一次（常用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">showInfo</span>&gt;</span>点我单推雪狐桑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、其他：self, passive等</p>
<h3 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h3><p>为何引入计算属性这个概念？通过以下姓名案例进行分析：</p>
<h4 id="姓名案例的插值语法实现"><a href="#姓名案例的插值语法实现" class="headerlink" title="姓名案例的插值语法实现"></a>姓名案例的插值语法实现</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">lastName</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  all:&#123;&#123;firstName+&#x27;-&#x27;+lastName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import &#123;createApp&#125; from &quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123;createApp&#125;=<span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app=<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">firstName</span>: <span class="string">&quot;潘&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lastName</span>: <span class="string">&quot;成蹊&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#root&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="姓名案例methods实现"><a href="#姓名案例methods实现" class="headerlink" title="姓名案例methods实现"></a>姓名案例methods实现</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">lastName</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    all:&#123;&#123;fullName()&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// import &#123;createApp&#125; from &quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;createApp&#125;=<span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> app=<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&quot;潘&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&quot;成蹊&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&#x27;-&#x27;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#root&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="计算属性（computed）引入：实现姓名案例"><a href="#计算属性（computed）引入：实现姓名案例" class="headerlink" title="计算属性（computed）引入：实现姓名案例"></a>计算属性（computed）引入：实现姓名案例</h4><p>当有人读取fullName时，get()方法就会被调用，并给fullName赋值。</p>
<p>get只有初次调用和属性得到变化之后才会进行调用。</p>
<font color='red'>优势：相比mathods而言有缓存</font>，可以节省很多次调用，节省系统资源

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">lastName</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    all:&#123;&#123;fullName&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// import &#123;createApp&#125; from &quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;createApp&#125;=<span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> app=<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&quot;潘&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&quot;成蹊&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#root&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

此外compute中除去get方法还有set方法（可选）

简写：直接fullname(){return}


### 监听属性(watch)

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// const &#123;createApp&#125;=Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app=<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isHot</span>=!<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;凉爽&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">isHot</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue, <span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



### 路由Router

vue-router是基于路由和组件的使得路由和组件映射起来，目的在于在URL产生变化的时候，不进行页面的整体刷新，即为路由的整体实现。

<font color='red'>路由可理解为指向页面</font>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/vue@3&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue-router@4&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Hello App!&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;!--使用 router-link 组件进行导航 --&gt;</span><br><span class="line">    &lt;!--通过传递 `to` 来指定链接 --&gt;</span><br><span class="line">    &lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;Go to Home&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">//界面1，home</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//界面2：about</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      <span class="comment">// route level code-splitting</span></span><br><span class="line">      <span class="comment">// this generates a separate chunk (About.[hash].js) for this route</span></span><br><span class="line">      <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router<span class="comment">//导出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础实战</title>
    <url>/2022/11/01/vue%E5%9F%BA%E7%A1%80%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h4 id="两种风格的API简介"><a href="#两种风格的API简介" class="headerlink" title="两种风格的API简介"></a>两种风格的API简介</h4><h5 id="选项式-API-（Options-API）"><a href="#选项式-API-（Options-API）" class="headerlink" title="选项式 API （Options API）"></a>选项式 API <a href="https://cn.vuejs.org/guide/introduction.html#options-api">（Options API）</a></h5><p>使用选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑，例如 <code>data</code>、<code>methods</code> 和 <code>mounted</code>。选项所定义的属性都会暴露在函数内部的 <code>this</code> 上，它会指向当前的组件实例。</p>
<h5 id="组合式-API-Composition-API"><a href="#组合式-API-Composition-API" class="headerlink" title="组合式 API (Composition API)"></a>组合式 API <a href="https://cn.vuejs.org/guide/introduction.html#composition-api">(Composition API)</a></h5><p>通过组合式 API，我们可以使用导入的 API 函数来描述组件逻辑。在单文件组件中，组合式 API 通常会与 <a href="https://cn.vuejs.org/api/sfc-script-setup.html">``</a> 搭配使用。这个 <code>setup</code> attribute 是一个标识，告诉 Vue 需要在编译时进行一些处理，让我们可以更简洁地使用组合式 API。比如，<code>&lt;script setup&gt;</code> 中的导入和顶层变量/函数都能够在模板中直接使用。</p>
<h4 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h4><h5 id="选项式"><a href="#选项式" class="headerlink" title="选项式"></a>选项式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// import AlertBox from &#x27;./components/AlertBox.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      message:&quot;HelloWorld&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h5 id="组合式"><a href="#组合式" class="headerlink" title="组合式"></a>组合式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">// “ref”是用来存储值的响应式数据源。</span><br><span class="line">// 理论上我们在展示该字符串的时候不需要将其包装在 ref() 中，</span><br><span class="line">// 但是在下一个示例中更改这个值的时候，我们就需要它了。</span><br><span class="line">const message = ref(&#x27;Hello World!&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="样式绑定即更新"><a href="#样式绑定即更新" class="headerlink" title="样式绑定即更新"></a>样式绑定即更新</h4><p>点击更新样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">现在我们将元素的 attribute / property 响应式地绑定到状态上。</span><br><span class="line">这个 :title 语法是 v-bind:title 的简写。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const message =new ref( &quot;Hello World!&quot; )</span><br><span class="line">const isRed = new ref(true)</span><br><span class="line"></span><br><span class="line">//更改文字颜色</span><br><span class="line">function changeColor()&#123;</span><br><span class="line">  isRed.value = !isRed.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;样式绑定如下&lt;/p&gt;</span><br><span class="line">  &lt;p :title=&quot;message&quot;&gt;看！我有一个动态绑定标题&lt;/p&gt;</span><br><span class="line">  &lt;p :class=&quot;&#123;red:isRed&#125;&quot; @click=&quot;changeColor&quot;&gt;点我切换颜色！（红/黑）&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.red &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h4 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h4><p>我们可以通过 v-if 和 v-for 指令条件性地或循环地渲染内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const show = ref(true)</span><br><span class="line">const list = ref([1, 2, 3])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;show = !show&quot;&gt;Toggle List&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;list.push(list.length + 1)&quot;&gt;Push Number&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;list.pop()&quot;&gt;Pop Number&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;list.reverse()&quot;&gt;Reverse List&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul v-if=&quot;show &amp;&amp; list.length&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item of list&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;p v-else-if=&quot;list.length&quot;&gt;List is not empty, but hidden.&lt;/p&gt;</span><br><span class="line">  &lt;p v-else&gt;List is empty.&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h4><p>我们可以使用 v-model 指令在状态和表单输入之间创建双向绑定。v-bind(快捷:=)可以实现单向数据绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const text = ref(&#x27;Edit me&#x27;)</span><br><span class="line">const checked = ref(true)</span><br><span class="line">const checkedNames = ref([&#x27;Jack&#x27;])</span><br><span class="line">const picked = ref(&#x27;One&#x27;)</span><br><span class="line">const selected = ref(&#x27;A&#x27;)</span><br><span class="line">const multiSelected = ref([&#x27;A&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Text Input&lt;/h2&gt;</span><br><span class="line">  &lt;input v-model=&quot;text&quot;&gt; &#123;&#123; text &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;Checkbox&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;checkbox&quot;&gt;Checked: &#123;&#123; checked &#125;&#125;&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--</span><br><span class="line">    多个复选框可以绑定到</span><br><span class="line">    相同的 v-model 数组</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;h2&gt;Multi Checkbox&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;</span><br><span class="line">  &lt;p&gt;Checked names: &lt;pre&gt;&#123;&#123; checkedNames &#125;&#125;&lt;/pre&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;Radio&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;Select&lt;/h2&gt;</span><br><span class="line">  &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">    &lt;option disabled value=&quot;&quot;&gt;Please select one&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;Multi Select&lt;/h2&gt;</span><br><span class="line">  &lt;select v-model=&quot;multiSelected&quot; multiple style=&quot;width:100px&quot;&gt;</span><br><span class="line">    &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;span&gt;Selected: &#123;&#123; multiSelected &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="简单组件的实现"><a href="#简单组件的实现" class="headerlink" title="简单组件的实现"></a>简单组件的实现</h4><h5 id="TodoItem-vue"><a href="#TodoItem-vue" class="headerlink" title="TodoItem.vue"></a>TodoItem.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  todo: Object</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h5 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h5><p><font color='red'>在子组件调用const props=defineProps({})可以传入父组件中的一些数据信息。</font>选项式API中，直接定义props:[]传入信息是等价的方式。TypeScript 用户请参考：<a href="https://cn.vuejs.org/guide/typescript/composition-api.html#typing-component-props">为组件 props 标注类型</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">这里展示了最简单的组件，它接收一个 prop 并渲染出来。</span><br><span class="line">在指南页面了解更多关于组件的内容！</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import TodoItem from &#x27;./TodoItem.vue&#x27;</span><br><span class="line"></span><br><span class="line">const groceryList = ref([</span><br><span class="line">  &#123; id: 0, text: &#x27;Vegetables&#x27; &#125;,</span><br><span class="line">  &#123; id: 1, text: &#x27;Cheese&#x27; &#125;,</span><br><span class="line">  &#123; id: 2, text: &#x27;Whatever else humans are supposed to eat&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      我们给每个 todo 项提供它所表示的 todo 对象，</span><br><span class="line">      以便能够动态展示内容。</span><br><span class="line">      同时还需要给每个组件提供一个“key”，</span><br><span class="line">      这在指南的 v-for 部分有详细解释。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;TodoItem</span><br><span class="line">      v-for=&quot;item in groceryList&quot;</span><br><span class="line">      :todo=&quot;item&quot;</span><br><span class="line">      :key=&quot;item.id&quot;</span><br><span class="line">    &gt;&lt;/TodoItem&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>计算方法作业</title>
    <url>/2022/10/15/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="绪论和插值"><a href="#绪论和插值" class="headerlink" title="绪论和插值"></a>绪论和插值</h3><h4 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h4><p>分别用 2<em>.</em>718281，2<em>.</em>718282 作数 <em>e</em> 的近似值，则其有效数字分别有 ( 6 ) 位和 ( 7 ) 位。</p>
<h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><p>取$\sqrt{3}\approx1.732$，现在计算$x=(\sqrt{3}-1)^{4}$，下列方法中哪种最好？( C ) </p>
<p>A. $28-16 \sqrt{3}$</p>
<p>B.$(4-2 \sqrt{3})^{2}$</p>
<p>C.$\frac{16}{(4+2 \sqrt{3})^{2}}$</p>
<p>D.$\frac{16}{(\sqrt{3}+1)^{4}}$</p>
<h4 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h4><p>假设测得一个圆柱体容器的底面半径和高分别为 50.00m 和 100.00m，且已知其测量误差为 0.005m。试估计由此算得的容积的绝对误差和相对误差？</p>
<p>$V=\pi r^{2} h$   </p>
<p>绝对误差：$V’-V=2 \pi r h\left(r’-r\right)<br>$=2 × 3.1415926 × 50 × 100 × 0.005=157.0796325</p>
<p>相对误差：$\frac{V’-V}{V}=2\frac{r’-r}{r} $=0.0002</p>
<h4 id="证明题"><a href="#证明题" class="headerlink" title="证明题"></a>证明题</h4><p>证明方程$ f(x) = e^x + 10x − 2 $在区间$ [0, 1] $内有唯一的实根，使用二分法求这一实根，要求误差不超过 $\frac{1}{2}× 10^{−2}$？</p>
<p>$f(0.5)=4.648&gt;0 ===&gt; f(0.25)=1.784&gt;0 ===&gt; f(0.125)=0.383&gt;0$</p>
<p>$ ===&gt; f(0.0625)= -0.311<0 ===>f(0.09375)=0.0357&gt;0$</p>
<p>$ ===&gt; f(0.078125)=-0.137<0 ===> f(0.0859375)=-0.050 $</p>
<p>$===&gt; f(0.08984375)=-0.0075 ===&gt; f(0.091796875)=0.0141 $</p>
<p>$===&gt; f(0.0908203125)=0.0032&lt; \frac{1}{2}× 10^{-2}$</p>
<p>实根是0.0908203125</p>
<h4 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h4><p>编程实现二分法算法？</p>
<p>以二分查找为例，函数编写如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BinarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid=(right-left)/<span class="number">2</span>+left;<span class="comment">//有效防止溢出</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)   <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                right=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="填空题-1"><a href="#填空题-1" class="headerlink" title="填空题"></a>填空题</h4><p>已知$f(x)=x^3+x+1$，差商$f[0,1,2,3]=(1),f[0,1,2,3,4]=(0)$</p>
<h4 id="计算题-1"><a href="#计算题-1" class="headerlink" title="计算题"></a>计算题</h4><p>下表是中国新冠肺炎疫情自 2.9 日到 2.17 日真实确认人数 (数据来自<a href="https://wh.opensource-service.cn">https://wh.opensource-service.cn</a>)</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202210151303344.png" alt="image-20221015130314171"></p>
<p>现以 (9,11,13,15,17) 为样本点，试用拉格朗日插值方法，预测 (10,12,14,16) 日的确诊人数，并与真实值进行比较，计算绝对误差。</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202210151322477.png" alt="image-20221015132233347"></p>
<h4 id="计算题-2"><a href="#计算题-2" class="headerlink" title="计算题"></a>计算题</h4><p>对上表数据以 (9,11,13,15,17) 为样本点，试用牛顿插值方法，预测 (10,12,14,16) 日的确诊人数，并与真实值进行比较，计算绝对误差。</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202210151334829.png" alt="image-20221015133417623"></p>
<h4 id="计算题-3"><a href="#计算题-3" class="headerlink" title="计算题"></a>计算题</h4><p>求次数$\leq3$的多项式$p(x)$，使满足如条件：</p>
<script type="math/tex; mode=display">
p(0)=0,p(1)=1\\
p'(0)=1,p'(1)=2</script><p>答：$f(x) = x^3-x^2+x$</p>
<h4 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h4><p>给定插值点$ (x_i,y_i), i = 0, 1, 2, · · ·, n$，可分别构造$ Lagrange $插值多项式和 $Newton$插值多项式，证明两者相同并说明各自具有的特点？</p>
<p>由于两者都是通过模拟多项式函数，并计算不同次数前参数的方法，因此两者得到的结果相同。</p>
<p>Lagrange 插值多项式：</p>
<ul>
<li>插值点要求等距</li>
<li>插值基函数形式简单</li>
<li>当有新的插值点加入时，基函数要重新计算</li>
</ul>
<p>Newton 插值多项式：</p>
<ul>
<li>当有新的插值点加入时，基函数不需要重新计算</li>
</ul>
<h3 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h3><h4 id="填空题-2"><a href="#填空题-2" class="headerlink" title="填空题"></a>填空题</h4><p>求$\int_{1}^{2} x^{2} d x$，利用梯形公式的计算结果为（$\frac{5}{2}$），利用Simpson公式的计算结果为（$\frac{7}{3}$）。</p>
<p>梯形公式：$\frac{2-1}{2} \times(f(1)+f(2))=\frac{5}{2}$</p>
<p>Simpson公式：$\frac{1}{6}[f(1)+4 \cdot f(\frac{1+2}{2})+f(2)]=\frac{7}{3}$</p>
<h4 id="计算题-4"><a href="#计算题-4" class="headerlink" title="计算题"></a>计算题</h4><p>使用New-Cotes公式（$n=2,3,4$时）计算积分$\int_{-1}^{1} x^{2}e^x d x$</p>
<p>当$n=2$时，原式=$\frac{2}{6}[f(-1)+4*f(\frac{-1+1}{2})+f(1)]=\frac{1}{3}(e+\frac{1}{e})$</p>
<p>当$n=3$时，原式=$\frac{2}{8}[f(-1)+3f(-\frac{1}{3})+3f(\frac{1}{3})+f(1)]=\frac{1}{4}(e^{-1}+\frac{1}{3}e^{-\frac{1}{3}}+\frac{1}{3}e^{\frac{1}{3}}+e)$</p>
<p>当$n=4$时，原式=$\frac{2}{90}[7f(-1)+32f(-0.5)+12f(0)+32f(0.5)+7f(1)]=\frac{1}{45}(7e^{-1}+8e^{-\frac{1}{2}}+8e^{\frac{1}{2}}+7e)$</p>
<h4 id="计算题-5"><a href="#计算题-5" class="headerlink" title="计算题"></a>计算题</h4><p>求$A,B$使求积公式<script type="math/tex">\int_{-1}^{1} f(x) d x \approx A[f(-1)+f(1)]+B\left[f\left(-\frac{1}{2}\right)+f\left(\frac{1}{2}\right)\right]</script>的代数精度尽可能高，并求出其代数精度，利用此公式计算$I=\int_{1}^{2} \frac{1}{x} d x$，保留四位小数.</p>
<p>令$f(x)=1,x^2$，代入得：<script type="math/tex">\left\{\begin{array}{l}
\int_{-1}^{1} 1 d x=2 A+2 B \\
\int_{-1}^{1} x^{2} d x=2 A+\frac{1}{2} B
\end{array}\right.</script>，解得$A=\frac{1}{9},B=\frac{8}{9}$</p>
<p>代入$f(x)=x^3$时等式成立，但$f(x)=x^4$时等式不成立，因此代数精度为3.</p>
<p>解得$I=1.6667$</p>
<h4 id="计算题-6"><a href="#计算题-6" class="headerlink" title="计算题"></a>计算题</h4><p>用三点的 Gauss 公式求下面的积分：$\int_{-1}^{1} \frac{x^{2}}{\sqrt{1-x^{2}}} \mathrm{~d} x$</p>
<p>$\int_{-1}^{1} f(x) d x =\frac{5}{9} f\left(-\sqrt{\frac{3}{5}}\right)+\frac{8}{9} f(0)+\frac{5}{9} f\left(\sqrt{\frac{3}{5}}\right)$，解得$f(x)=\frac{\sqrt{10}{3}$</p>
<h4 id="问答题-1"><a href="#问答题-1" class="headerlink" title="问答题"></a>问答题</h4><p>什么是求积公式的代数精确度？如何利用代数精确度的概念去确定求积公式中的待定参数？</p>
<p>代数精确度：对于函数$f(x)$的次数精确成立的求积公式</p>
<p>如何确定：令$f(x)=x^i(i=0,1,…,m)$，直到精确符合的$m$达到最大的符合值为止</p>
<h3 id="非线性方程求根"><a href="#非线性方程求根" class="headerlink" title="非线性方程求根"></a>非线性方程求根</h3><h4 id="填空题-3"><a href="#填空题-3" class="headerlink" title="填空题"></a>填空题</h4><p>写出立方根 $\sqrt[3]{13}$ 的牛顿迭代公式 ( )。</p>
<p>答：由牛顿迭代公式$x_{n+1}=x_n-\frac{f(x_n)}{f^{\prime}(x_n)}$,可得公式：$x_{k+1}=\frac{2 x_{k}^{3}+13}{3 x_{k}^{2}}$</p>
<p>因此牛顿迭代法的求$\sqrt[3]{x}$   C++函数如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">CubeRoot</span><span class="params">(<span class="type">float</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> x = num;</span><br><span class="line">    <span class="type">float</span> error = <span class="number">1e-5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fabs</span>(num - (x * x * x)) &gt;= error)</span><br><span class="line">    &#123;</span><br><span class="line">        x = (<span class="number">2</span> * x + num / (x * x)) / <span class="number">3.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h4><p>已知方程$x^3-2x-5=0$在$x=2$附近有根，下列迭代格式中在$x_0=2$不收敛的是（C）。</p>
<p>(A) $ x_{k+1}=\sqrt[3]{2 x_{k}+5} $<br>(B) $ x_{k+1}=\sqrt{2+\frac{5}{x_{k}}} $<br>(C)$  x_{k+1}=x_{k}^{3}-x_{k}-5 $<br>(D) $ x_{k+1}=\frac{2 x_{k}^{3}+5}{3 x_{k}^{2}-2} $</p>
<h4 id="计算题-7"><a href="#计算题-7" class="headerlink" title="计算题"></a>计算题</h4><p>用迭代法求方程$x^3-x-1=0$在$x=1.5$附近的一个根。</p>
<p>解：首先将方程改写为$x_i+1 = (x_i + 1) ^ {\frac{1}{3}}$，接下来用程序进行迭代计算，如下图所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">1.5</span>, x0; </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fabs</span>(x - x0) &gt;= <span class="number">1e-6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x0 = x;</span><br><span class="line">        x = <span class="built_in">pow</span>(x0 + <span class="number">1</span>, <span class="number">1.0</span> / <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result: x =%lf\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>计算出的根为：<code>x=1.324718</code></p>
<h4 id="计算题-8"><a href="#计算题-8" class="headerlink" title="计算题"></a>计算题</h4><p>利用牛顿法求$x^3-2x-55=0$在区间$[3,4]$的根，要求列出迭代计算3次的计算结果。</p>
<p>解：首先将方程改写为$x=(2x^3+55)/(3x^2-2)$，编写迭代算法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getF</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span>*<span class="built_in">pow</span>(x,<span class="number">3</span>)+<span class="number">55</span>)*(<span class="number">3</span>*x*x<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> t=<span class="built_in">getF</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">        t=<span class="built_in">getF</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">2725</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">9.01537</span>e+<span class="number">17</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3.5733</span>e+<span class="number">90</span></span><br></pre></td></tr></table></figure>
<h4 id="计算题-9"><a href="#计算题-9" class="headerlink" title="计算题"></a>计算题</h4><p>用埃特金加速法求$x^5+5x^4-2=0$在$-5$附近的根，要求迭代1次，结果保留5位有效数字（精确解位$-4.9968$）。</p>
<p>解：首先将函数化为：$x = (2-5x^4)^{\frac{1}{5}}$，编写迭代1次算法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">g</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span><span class="number">-5</span>*<span class="built_in">pow</span>(x,<span class="number">4</span>)&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="built_in">abs</span>(<span class="number">2</span><span class="number">-5</span>*<span class="built_in">pow</span>(x,<span class="number">4</span>)),<span class="number">1</span>/<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> y=<span class="built_in">g</span>(<span class="number">-5</span>);</span><br><span class="line">    <span class="type">double</span> z=<span class="built_in">g</span>(y);</span><br><span class="line">    <span class="type">double</span> x=<span class="built_in">pow</span>(z-(z-y),<span class="number">2</span>)/(z<span class="number">-2</span>*y<span class="number">-5</span>);</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解得x=-4.9968</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>计算方法</tag>
      </tags>
  </entry>
  <entry>
    <title>学习JAVA过程中自己遇到的一些问题</title>
    <url>/2022/09/19/%E8%87%AA%E5%AD%A6java/</url>
    <content><![CDATA[<h3 id="Java的数据输入Scanner"><a href="#Java的数据输入Scanner" class="headerlink" title="Java的数据输入Scanner"></a>Java的数据输入Scanner</h3><p>Java中使用Scanner处理输入。你需要注意如下几个地方</p>
<ul>
<li>程序开头必须<code>import java.util.Scanner</code>导入Scanner类。</li>
<li>使用<code>Scanner sc = new Scanner(System.in);</code>生成scanner对象。</li>
</ul>
<p>该Scanner对象sc可以处理标准输入。所谓的标准输入，在你的电脑上就是你从键盘通过控制台进行的输入。注意：字符串本身，也可被<code>Scanner</code>对象处理，如下代码就可以处理字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1 a 3.0&quot;</span>;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(str);</span><br><span class="line"><span class="comment">//现在就可以通过sc来处理字符串str，比如将其中的每个字符取出来。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();    <span class="comment">//将字符串中的1读出来，并转化为int型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">y</span> <span class="operator">=</span> sc.next();   <span class="comment">//将字符串中的a读出来，是String型</span></span><br><span class="line"><span class="type">double</span> <span class="variable">z</span> <span class="operator">=</span> sc.nextDouble();  <span class="comment">//将字符串中的3.0读出来，并转化为double型</span></span><br></pre></td></tr></table></figure>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h4 id="保留2位小数"><a href="#保留2位小数" class="headerlink" title="保留2位小数"></a>保留2位小数</h4><p>使用String的format方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">&quot;%.2f&quot;</span>, f));</span><br></pre></td></tr></table></figure>
<h3 id="一些数据类型的定义与操作"><a href="#一些数据类型的定义与操作" class="headerlink" title="一些数据类型的定义与操作"></a>一些数据类型的定义与操作</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[arr_size]</span><br></pre></td></tr></table></figure>
<h5 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(arr);</span><br></pre></td></tr></table></figure>
<h5 id="取最大最小值"><a href="#取最大最小值" class="headerlink" title="取最大最小值"></a>取最大最小值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">max=Math.max(arr);</span><br><span class="line">min=Math.min(arr);</span><br></pre></td></tr></table></figure>
<h4 id="动态数组-类似于C-的vector"><a href="#动态数组-类似于C-的vector" class="headerlink" title="动态数组(类似于C++的vector)"></a>动态数组(类似于C++的vector)</h4><h5 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Double&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Double&gt;();</span><br></pre></td></tr></table></figure>
<h5 id="尾部添加"><a href="#尾部添加" class="headerlink" title="尾部添加"></a>尾部添加</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr.add(val);</span><br></pre></td></tr></table></figure>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(arr);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>seaborn</title>
    <url>/2022/09/15/seaborn/</url>
    <content><![CDATA[<h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p>首先导入库函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure>
<h4 id="scatterplot散点图"><a href="#scatterplot散点图" class="headerlink" title="scatterplot散点图"></a>scatterplot散点图</h4><p>1、参数</p>
<p> 散点图是利用散点来描述两个变量的联合分布，<strong>scatterplot</strong> 适用于<strong>变量都是数字</strong>的情况。在后面的<strong>Categorical plots(分类图)\</strong>中，我们将会看到使用散点图可视化*<em>分类数据*</em>的专门工具</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scatterplot参数</span></span><br><span class="line">seaborn.scatterplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, style=<span class="literal">None</span>, size=<span class="literal">None</span>, </span><br><span class="line">data=<span class="literal">None</span>, palette=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, hue_norm=<span class="literal">None</span>, sizes=<span class="literal">None</span>, </span><br><span class="line">size_order=<span class="literal">None</span>, size_norm=<span class="literal">None</span>, markers=<span class="literal">True</span>, style_order=<span class="literal">None</span>,</span><br><span class="line"> x_bins=<span class="literal">None</span>, y_bins=<span class="literal">None</span>, units=<span class="literal">None</span>, estimator=<span class="literal">None</span>, ci=<span class="number">95</span>, n_boot=<span class="number">1000</span>, </span><br><span class="line"> alpha=<span class="string">&#x27;auto&#x27;</span>, x_jitter=<span class="literal">None</span>, y_jitter=<span class="literal">None</span>, legend=<span class="string">&#x27;brief&#x27;</span>, ax=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2、样例</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用seaborn的数据</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line">sns.scatterplot(x=<span class="string">&#x27;total_bill&#x27;</span>,y=<span class="string">&#x27;tip&#x27;</span>,data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142333948.png" alt="image-20220914233259608"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.scatterplot(x=<span class="string">&#x27;total_bill&#x27;</span>,y=<span class="string">&#x27;tip&#x27;</span>,hue=<span class="string">&#x27;day&#x27;</span>,style=<span class="string">&#x27;time&#x27;</span>,size=<span class="string">&#x27;size&#x27;</span>,data=tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142333220.png" alt="image-20220914233347801"></p>
<h4 id="lineplot线图"><a href="#lineplot线图" class="headerlink" title="lineplot线图"></a>lineplot线图</h4><p>1、参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seaborn.lineplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, size=<span class="literal">None</span>, style=<span class="literal">None</span>,</span><br><span class="line"> data=<span class="literal">None</span>, palette=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, hue_norm=<span class="literal">None</span>, sizes=<span class="literal">None</span>,</span><br><span class="line">  size_order=<span class="literal">None</span>, size_norm=<span class="literal">None</span>, dashes=<span class="literal">True</span>, markers=<span class="literal">None</span>, </span><br><span class="line">  style_order=<span class="literal">None</span>, units=<span class="literal">None</span>, estimator=<span class="string">&#x27;mean&#x27;</span>, ci=<span class="number">95</span>, n_boot=<span class="number">1000</span>, </span><br><span class="line">  sort=<span class="literal">True</span>, err_style=<span class="string">&#x27;band&#x27;</span>, err_kws=<span class="literal">None</span>, legend=<span class="string">&#x27;brief&#x27;</span>, ax=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2、样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fmri = sns.load_dataset(<span class="string">&#x27;fmri&#x27;</span>)</span><br><span class="line">sns.lineplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, data=fmri)</span><br><span class="line"><span class="comment"># 阴影是默认的置信区间，可设置ci=0，将其去除</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142335630.png" alt="image-20220914233512209"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.lineplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>,hue=<span class="string">&quot;event&quot;</span>, style=<span class="string">&quot;event&quot;</span>,</span><br><span class="line">markers=<span class="literal">True</span>, dashes=<span class="literal">False</span>, data=fmri)</span><br><span class="line"><span class="comment"># markers=True表示使用不同的标记</span></span><br><span class="line"><span class="comment"># dashes=True表示一条实线，一条虚线</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142339330.png" alt="image-20220914233900396"></p>
<h4 id="replot关系图"><a href="#replot关系图" class="headerlink" title="replot关系图"></a>replot关系图</h4><p>1、参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seaborn.relplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, size=<span class="literal">None</span>, style=<span class="literal">None</span>, </span><br><span class="line">data=<span class="literal">None</span>, row=<span class="literal">None</span>, col=<span class="literal">None</span>, col_wrap=<span class="literal">None</span>, row_order=<span class="literal">None</span>, </span><br><span class="line">col_order=<span class="literal">None</span>, palette=<span class="literal">None</span>, hue_order=<span class="literal">None</span>, hue_norm=<span class="literal">None</span>, </span><br><span class="line">sizes=<span class="literal">None</span>, size_order=<span class="literal">None</span>, size_norm=<span class="literal">None</span>, markers=<span class="literal">None</span>, dashes=<span class="literal">None</span>,</span><br><span class="line"> style_order=<span class="literal">None</span>, legend=<span class="string">&#x27;brief&#x27;</span>, kind=<span class="string">&#x27;scatter&#x27;</span>, height=<span class="number">5</span>, aspect=<span class="number">1</span>,</span><br><span class="line">  facet_kws=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure>
<p>相当于<code>lineplot和scatterplot的归约</code>，可以通过<code>kind参数</code>指定画什么图形，参数解释如下：</p>
<ul>
<li>kind: 默认是’scatter’，也可以选择kind=‘line’</li>
<li>sizes: List、dict或tuple，可选，说白了就是图片大小，注意和size区分；</li>
<li>col、row: col指定列的分组变量，row指定行的分组变量</li>
</ul>
<p>2、样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">g = sns.relplot(x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, data=tips)</span><br><span class="line"><span class="comment">#两者效果一模一样</span></span><br><span class="line">ax = sns.scatterplot(x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, data=tips)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142343264.png" alt="image-20220914234330383"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;time&quot;</span>, size=<span class="string">&quot;size&quot;</span>,</span><br><span class="line">            palette=[<span class="string">&quot;b&quot;</span>, <span class="string">&quot;r&quot;</span>], sizes=(<span class="number">10</span>, <span class="number">100</span>),col=<span class="string">&quot;time&quot;</span>,row=<span class="string">&#x27;sex&#x27;</span>, data=tips)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142347958.png" alt="image-20220914234703791"></p>
<h3 id="Categorical-plots分类图"><a href="#Categorical-plots分类图" class="headerlink" title="Categorical plots分类图"></a>Categorical plots分类图</h3><p>Categorical plots(分类图) 具体可以分为下main三种类型，11种图形：</p>
<ul>
<li>Categorical scatterplots(分类散点图)<ul>
<li>stripplot(分布散点图)</li>
<li>swarmplot(分布密度散点图)</li>
</ul>
</li>
<li>Categorical distribution plots(分类分布图)<ul>
<li>boxplot(箱型图)</li>
<li>violinplot(小提琴图)</li>
<li>violinplot+stripplot(小提琴图+分布散点图)</li>
<li>violinplot+swarmplot(小提琴图+分布密度散点图)</li>
<li>boxplot+stripplot(箱线图+分布散点图)</li>
</ul>
</li>
<li>Categorical estimate plots(分类估计图)<ul>
<li>barplot(条形图)</li>
<li>countplot(计数图)</li>
<li>piontplot(点图)</li>
<li>catplot()</li>
</ul>
</li>
</ul>
<h4 id="Categorical-scatterplots分类散点图"><a href="#Categorical-scatterplots分类散点图" class="headerlink" title="Categorical scatterplots分类散点图"></a>Categorical scatterplots分类散点图</h4><h5 id="stripplot分布散点图"><a href="#stripplot分布散点图" class="headerlink" title="stripplot分布散点图"></a>stripplot分布散点图</h5><p>stripplot(分布散点图) 就是<code>其中一个变量是分类变量的scatterplot(散点图)</code>。stripplot（分布散点图）一般并不单独绘制，它常常与boxplot和violinplot联合起来绘制，作为这两种图的补充。</p>
<p>1、参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seaborn.stripplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, data=<span class="literal">None</span>, order=<span class="literal">None</span>, </span><br><span class="line">hue_order=<span class="literal">None</span>, jitter=<span class="literal">True</span>, dodge=<span class="literal">False</span>, orient=<span class="literal">None</span>, color=<span class="literal">None</span>, </span><br><span class="line">palette=<span class="literal">None</span>, size=<span class="number">5</span>, edgecolor=<span class="string">&#x27;gray&#x27;</span>, linewidth=<span class="number">0</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure>
<ul>
<li>order：用order参数进行筛选分类类别，例如：order=[‘sun’,‘sat’]；</li>
<li>jitter：抖动项，表示抖动程度，可以是float，或者True。如果不抖动的话，那么散点就会呈现一条直线了，并不利于可视化</li>
<li>dodge：重叠区域是否分开，当使用hue时，将其设置为True，将沿着分类轴将不同色调级别的条带分开。</li>
<li>orient：“v” | “h”，vertical（垂直） 和 horizontal（水平）的意思；</li>
</ul>
<p>2、样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">sns.stripplot(x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, data=tips)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142356208.png" alt="image-20220914235614433"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.stripplot(x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, hue=<span class="string">&quot;smoker&quot;</span>,data=tips,</span><br><span class="line">              jitter=<span class="literal">True</span>,palette=<span class="string">&quot;Set2&quot;</span>, dodge=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209142358061.png" alt="image-20220914235844046"></p>
<h5 id="swarmplot分布密度散点图"><a href="#swarmplot分布密度散点图" class="headerlink" title="swarmplot分布密度散点图"></a>swarmplot分布密度散点图</h5><p>这个函数<code>类似于stripplot()</code>，但是对点进行了调整(只沿着分类轴)，<code>使每个点都不会重叠</code>。这更好地表示了值的密度分布，但显然，不适用大量观测的可视化。<font color='red'>使用方法与strippplot相似</font></p>
<h4 id="Categorical-distribution-plots分类分布图"><a href="#Categorical-distribution-plots分类分布图" class="headerlink" title="Categorical distribution plots分类分布图"></a>Categorical distribution plots分类分布图</h4><h5 id="boxplot箱型图"><a href="#boxplot箱型图" class="headerlink" title="boxplot箱型图"></a>boxplot箱型图</h5><p>1、参数</p>
<p>boxplot(箱型图) 就是描述变量关于不同类别的分布情况。框显示数据集的四分位数，线显示分布的其余部分，它能显示出一组数据的最大值、最小值、中位数及上下四分位数，使用四分位数范围函数的方法可以确定“离群值”的点。具体用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seaborn.boxplot(x=<span class="literal">None</span>, y=<span class="literal">None</span>, hue=<span class="literal">None</span>, data=<span class="literal">None</span>, order=<span class="literal">None</span>, </span><br><span class="line">hue_order=<span class="literal">None</span>, orient=<span class="literal">None</span>, color=<span class="literal">None</span>, palette=<span class="literal">None</span>, saturation=<span class="number">0.75</span>, </span><br><span class="line">width=<span class="number">0.8</span>, dodge=<span class="literal">True</span>, fliersize=<span class="number">5</span>, linewidth=<span class="literal">None</span>, whis=<span class="number">1.5</span>, notch=<span class="literal">False</span>, ax=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure>
<ul>
<li>saturation：饱和度，可设置为1；</li>
<li>width：float，控制箱型图的宽度大小；</li>
<li>fliersize：float，用于指示离群值观察的标记大小；</li>
<li>whis：可理解为异常值的上限IQR比例；</li>
</ul>
<p>2、样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.boxplot(x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, data=tips)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209150010730.png" alt="image-20220915001012931"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.boxplot(x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, hue=<span class="string">&quot;time&quot;</span>,data=tips,</span><br><span class="line">            linewidth=<span class="number">0.5</span>,saturation=<span class="number">1</span>,width=<span class="number">1</span>,fliersize=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202209150013856.png" alt="image-20220915001233378"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>并行程序设计实验</title>
    <url>/2022/08/24/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h3 id="实验一：编写Pthreads程序实现直方图统计"><a href="#实验一：编写Pthreads程序实现直方图统计" class="headerlink" title="实验一：编写Pthreads程序实现直方图统计"></a>实验一：编写Pthreads程序实现直方图统计</h3><p>编写一个Pthreads程序实现直方图统计，选择使用忙等待、互斥量和信号量来保证临界区的互斥，并分析方法的优点和缺点。</p>
<h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>一个程序生成大量的浮点数并存储在数组里，为了对数据分布有一个直观感受，绘制一个数据直方图。</p>
<h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>输入：</p>
<ul>
<li>数据的个数：data_count</li>
<li>一个大小为data_count的浮点数组：data</li>
<li>包含最小值的桶中的最小值：min_meas</li>
<li>包含最大值的桶中的最大值：max_meas</li>
<li>桶的个数：bin_count</li>
</ul>
<p>输入样例：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">20</span></span><br><span class="line"><span class="attribute">1</span>.<span class="number">3</span> <span class="number">2</span>.<span class="number">9</span> <span class="number">0</span>.<span class="number">4</span> <span class="number">0</span>.<span class="number">3</span> <span class="number">1</span>.<span class="number">3</span> <span class="number">4</span>.<span class="number">4</span> <span class="number">1</span>.<span class="number">7</span> <span class="number">0</span>.<span class="number">4</span> <span class="number">3</span>.<span class="number">2</span> <span class="number">0</span>.<span class="number">3</span> <span class="number">4</span>.<span class="number">9</span> <span class="number">2</span>.<span class="number">4</span> <span class="number">3</span>.<span class="number">1</span> <span class="number">4</span>.<span class="number">4</span> <span class="number">3</span>.<span class="number">9</span> <span class="number">0</span>.<span class="number">4</span> <span class="number">4</span>.<span class="number">2</span> <span class="number">4</span>.<span class="number">5</span> <span class="number">5</span>.<span class="number">9</span> <span class="number">0</span>.<span class="number">9</span></span><br><span class="line"><span class="attribute">5</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<ul>
<li>bin_maxes：一个大小为bin_count的浮点数组</li>
<li>bin_counts：一个大小为bin_count的整数数组</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bin_maxes</span>:<span class="number">4</span>.<span class="number">2</span> <span class="number">4</span>.<span class="number">4</span> <span class="number">4</span>.<span class="number">4</span> <span class="number">4</span>.<span class="number">5</span> <span class="number">4</span>.<span class="number">9</span> <span class="number">5</span>.<span class="number">9</span> </span><br><span class="line"><span class="attribute">bin_counts</span>:<span class="meta"></span></span><br><span class="line"><span class="meta">[0.3,1.3):6</span></span><br><span class="line"><span class="meta">[1.3,2.3):3</span></span><br><span class="line"><span class="meta">[2.3,3.3):4</span></span><br><span class="line"><span class="meta">[3.3,4.3):2</span></span><br><span class="line"><span class="meta">[4.3,5.3):4</span></span><br></pre></td></tr></table></figure>
<p>其他说明：</p>
<ul>
<li><p>桶的宽度bin_width=(max_meas-min_meas)/bin_count</p>
</li>
<li><p>bin_maxes数据初始化</p>
<p>for(b=0;b&lt;bin_count;b++) </p>
<p>​        bin_maxes[b]=min_meas+bin_width*(b+1)</p>
</li>
<li><p>落在桶b中的数据bin_maxes[b-1]&lt;=measurement&lt;bin_maxes[b]</p>
</li>
<li><p>b=0: min_meas&lt;=measurement&lt;bin_maxes[0]</p>
</li>
<li><p>计数：for(i=0;i&lt;data_count;i++){</p>
<p>​                    bin=Find_bin(data[i],bin_maxes,bin_count,min_meas);</p>
<p>​            }</p>
</li>
</ul>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> data_count;<span class="comment">//数据的个数</span></span><br><span class="line"><span class="type">long</span> bin_width;<span class="comment">//桶的宽度</span></span><br><span class="line">vector&lt;<span class="type">double</span>&gt;datas;<span class="comment">//浮点型数组，resize to data_count</span></span><br><span class="line"><span class="type">double</span> min_meas,max_meas;<span class="comment">//所有数字中的最大值和最小值</span></span><br><span class="line"><span class="type">long</span> bin_count;<span class="comment">//桶的个数</span></span><br><span class="line">vector&lt;<span class="type">double</span>&gt;bin_maxes;<span class="comment">//存储所有直方的右边界</span></span><br><span class="line">vector&lt;<span class="type">long</span>&gt;bin_counts;<span class="comment">//存储所有组的数字数量</span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutexx;<span class="comment">//互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">func</span><span class="params">(<span class="type">void</span>* rank)</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">Find_bin</span><span class="params">(<span class="type">double</span> data,vector&lt;<span class="type">double</span>&gt;bin_maxes,<span class="type">long</span> bin_count,<span class="type">double</span> min_meas)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;testin.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="comment">// freopen(&quot;testout.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Enter the number of data:&quot;</span>;</span><br><span class="line">    cin&gt;&gt;data_count;</span><br><span class="line">    datas.<span class="built_in">resize</span>(data_count);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Enter elements of data:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;data_count;i++)&#123;</span><br><span class="line">        cin&gt;&gt;datas[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Enter the number of bin:&quot;</span>;</span><br><span class="line">    cin&gt;&gt;bin_count;</span><br><span class="line">    bin_maxes.<span class="built_in">resize</span>(bin_count);</span><br><span class="line">    bin_counts.<span class="built_in">resize</span>(bin_count,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    max_meas=*<span class="built_in">max_element</span>(datas.<span class="built_in">begin</span>(),datas.<span class="built_in">end</span>());</span><br><span class="line">    min_meas=*<span class="built_in">min_element</span>(datas.<span class="built_in">begin</span>(),datas.<span class="built_in">end</span>());<span class="comment">//获取最大值和最小值</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;max_meas&lt;&lt;&quot; &quot;&lt;&lt;min_meas&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//桶的宽度（右边界=左边界+宽度）</span></span><br><span class="line">    bin_width=(max_meas-min_meas)/bin_count;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;bin_width&lt;&lt;endl; </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//bin_maxes的数据初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> b=<span class="number">0</span>;b&lt;bin_count;b++)&#123;</span><br><span class="line">        bin_maxes[b]=min_meas+bin_width*(b+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出bin_maxes:</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;bin_maxes:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=bin_maxes.<span class="built_in">begin</span>();it!=bin_maxes.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span>* thread=(<span class="type">pthread_t</span>*)<span class="built_in">malloc</span>(data_count*<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>));<span class="comment">//给线程开辟data_count个空间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;data_count;i++)&#123;</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;thread[i],<span class="literal">NULL</span>,func,(<span class="type">void</span>*)i);<span class="comment">//创建一个线程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出bin_counts和对应的左右边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;bin_count;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%.1lf,%.1lf):%ld\n&quot;</span>,bin_maxes[i]-bin_width,bin_maxes[i],bin_counts[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">func</span><span class="params">(<span class="type">void</span>* rank)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> i=(<span class="type">long</span>)rank;</span><br><span class="line">    <span class="comment">//对操作进行互斥访问</span></span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;mutexx);</span><br><span class="line">    <span class="type">long</span> bin=<span class="built_in">Find_bin</span>(datas[i],bin_maxes,bin_count,min_meas);</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;mutexx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">Find_bin</span><span class="params">(<span class="type">double</span> data,vector&lt;<span class="type">double</span>&gt;bin_maxes,<span class="type">long</span> bin_count,<span class="type">double</span> min_meas)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(data&gt;=min_meas <span class="keyword">and</span> data&lt;bin_maxes[<span class="number">0</span>])&#123;</span><br><span class="line">        bin_counts[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> b=<span class="number">1</span>;b&lt;bin_count;b++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data&gt;=bin_maxes[b<span class="number">-1</span>] <span class="keyword">and</span> data&lt;bin_maxes[b])&#123;</span><br><span class="line">                bin_counts[b]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/ubuntu/%E6%88%AA%E5%9B%BE%202022-08-23%2021-33-31.png" style="zoom: 100%;" /></p>
<h3 id="实验二：使用Pthread实现任务队列"><a href="#实验二：使用Pthread实现任务队列" class="headerlink" title="实验二：使用Pthread实现任务队列"></a>实验二：使用Pthread实现任务队列</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>编写一个Pthreads程序实现一个“任务队列”。主线程启动用户指定数量的线程，这些线程进入条件等待状态。主线程生成一些任务（一定计算量），每生成一个新的任务，就用条件变量唤醒一个线程，当这个唤醒线程执行完任务时，回到条件等待状态。当主线程生成完所有任务，设置全局变量表示再没有要生成的任务了，并用一个广播唤醒所有线程。为了清晰起见，建议任务采用链表操作。</p>
<h4 id="问题解决-1"><a href="#问题解决-1" class="headerlink" title="问题解决"></a>问题解决</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">long</span> task;<span class="comment">//默认一个节点携带一个任务</span></span><br><span class="line">    Node* next;</span><br><span class="line">    <span class="built_in">Node</span>();</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">long</span> t,Node* p=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        task=t;</span><br><span class="line">        next=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列的数据结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* head;</span><br><span class="line">    Node* tail;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;</span><br><span class="line">        Node* p=<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">0</span>);</span><br><span class="line">        head=p;</span><br><span class="line">        tail=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node* p=head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Queue is Empty!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Elements in Queue:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cout&lt;&lt;p-&gt;task&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;     </span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">long</span> val)</span></span>&#123;</span><br><span class="line">        Node* p=<span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        tail-&gt;next=p;</span><br><span class="line">        tail=p;<span class="comment">//更新尾节点</span></span><br><span class="line">        length+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">long</span> ret=head-&gt;next-&gt;task;</span><br><span class="line">        Node* p=head-&gt;next;</span><br><span class="line">        head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutexx;<span class="comment">//两个互斥量</span></span><br><span class="line"><span class="type">int</span> thread_count;<span class="comment">//线程数量</span></span><br><span class="line"><span class="type">bool</span> finished=<span class="literal">false</span>;</span><br><span class="line">Queue q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">task</span><span class="params">(<span class="type">void</span>* rank)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Enter the number of threads:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;thread_count;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Enter the number of tasks:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">long</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//初始化队列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Elements in Queue:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    q.<span class="built_in">Display</span>();</span><br><span class="line">    <span class="type">pthread_t</span>* threads=(<span class="type">pthread_t</span>*)<span class="built_in">malloc</span>(thread_count*<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>));</span><br><span class="line">    <span class="comment">//创建线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;thread_count;i++)&#123;</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;threads[i],<span class="literal">NULL</span>,task,(<span class="type">void</span>*)i);</span><br><span class="line">    &#125;</span><br><span class="line">    finished=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//销毁线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;thread_count;i++)&#123;</span><br><span class="line">        <span class="built_in">pthread_join</span>(threads[i],<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(threads);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">task</span><span class="params">(<span class="type">void</span>* rank)</span></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;mutexx);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;thread: &quot;</span>&lt;&lt;(<span class="type">long</span>)rank&lt;&lt;<span class="string">&quot;    task: &quot;</span>&lt;&lt;q.<span class="built_in">pop</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;mutexx);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/ubuntu/%E6%88%AA%E5%9B%BE%202022-08-24%2019-49-10.png" alt=""></p>
<h3 id="实验三：利用OpenMP计算-pi-的值"><a href="#实验三：利用OpenMP计算-pi-的值" class="headerlink" title="实验三：利用OpenMP计算 $\pi$ 的值"></a>实验三：利用OpenMP计算 $\pi$ 的值</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>要求：用两种并行化方法实现，比进行比较分析</p>
<h4 id="问题解决-2"><a href="#问题解决-2" class="headerlink" title="问题解决"></a>问题解决</h4><p>查阅 $\pi$ 的计算公式如下：</p>
<script type="math/tex; mode=display">
\pi =\int_{0}^{1} \frac{4}{1+x^2} dx = \frac{1}{n} \sum_{i=1}^{n} \frac{4}{i+(\frac{i+0.5}{n} )^2}</script><p>那思路就很简单了，将函数图像向$x$轴作无数条垂线，每两条垂线与图像形成一个梯形。在多个线程中计算梯形的面积，最后累加即可。</p>
<p>函数：$f(x)= \frac{4}{1+x^2}$ ，可用下方代码表示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span>  <span class="title">f</span><span class="params">(<span class="type">double</span> x)</span><span class="comment">//函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> result;</span><br><span class="line">	result = <span class="number">4</span> / (<span class="number">1</span> + x * x);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><font color='red'>为了公平比较各种方法的运行效率，我假定将图形分为10000000个梯形。</font></strong></p>
<h5 id="使用critical语句实现"><a href="#使用critical语句实现" class="headerlink" title="使用critical语句实现"></a>使用critical语句实现</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span>  <span class="title">f</span><span class="params">(<span class="type">double</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> result;</span><br><span class="line">	result = <span class="number">4</span> / (<span class="number">1</span> + m * m);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Trap</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">int</span> n, <span class="type">double</span>* global_result_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> h, x, t_result;  <span class="comment">//h是高，x横坐标，t_result是部分积分值</span></span><br><span class="line">	<span class="type">double</span> lflag, rflag;  <span class="comment">// lflag 是积分的左端点，rflag是积分的右端点的横坐标</span></span><br><span class="line">	<span class="type">int</span> i, my_n;<span class="comment">//my_n是每个线程分到的梯形数</span></span><br><span class="line">	<span class="type">int</span> my_rank = <span class="built_in">omp_get_thread_num</span>();<span class="comment">//当前线程号</span></span><br><span class="line">	<span class="type">int</span> thread_count = <span class="built_in">omp_get_num_threads</span>();<span class="comment">//线程数量</span></span><br><span class="line"> </span><br><span class="line">	h = (b - a) / n;  <span class="comment">//初始化梯形的宽度</span></span><br><span class="line">	my_n = n / thread_count;</span><br><span class="line">	lflag = a + my_rank * my_n * h;</span><br><span class="line">	rflag = lflag + my_n * h;</span><br><span class="line">	t_result = (<span class="built_in">f</span>(lflag) + <span class="built_in">f</span>(rflag))/<span class="number">2.0</span>;</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; my_n<span class="number">-1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		x = lflag + i * h;</span><br><span class="line">		t_result += <span class="built_in">f</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	t_result = t_result * h;</span><br><span class="line"></span><br><span class="line">    <span class="meta"># <span class="keyword">pragma</span> omp critical</span></span><br><span class="line">	    * global_result_p += t_result;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> ret = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">double</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">100000</span>;<span class="comment">//分成若干份</span></span><br><span class="line">	<span class="type">int</span> thread_counts;</span><br><span class="line">	<span class="type">double</span> start_time;</span><br><span class="line">	<span class="type">double</span> end_time;</span><br><span class="line">	thread_counts = <span class="number">4</span>;</span><br><span class="line">	start_time = <span class="built_in">clock</span>();<span class="comment">//记录</span></span><br><span class="line">	</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> omp parallel num_threads(thread_counts)</span></span><br><span class="line">	<span class="built_in">Trap</span>(a, b, n, &amp;ret);</span><br><span class="line"> </span><br><span class="line">	end_time = <span class="built_in">clock</span>();<span class="comment">//记录</span></span><br><span class="line"> </span><br><span class="line">	<span class="type">double</span> runtime = (<span class="type">double</span>)(end_time - start_time) / CLOCKS_PER_SEC;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;PI evaluation took: &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Run time took: &quot;</span> &lt;&lt; runtime &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202208301243548.png" alt="image-20220830124307235"></p>
<h5 id="使用private子句和critical语句实现"><a href="#使用private子句和critical语句实现" class="headerlink" title="使用private子句和critical语句实现"></a>使用private子句和critical语句实现</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">double</span>  <span class="title">f</span><span class="params">(<span class="type">double</span> m)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> result;</span><br><span class="line">	result = <span class="number">4</span> / (<span class="number">1</span> + m * m);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> my_result, x;</span><br><span class="line">	<span class="type">double</span> local_a, local_b;</span><br><span class="line">	<span class="type">int</span> i, local_n;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> my_rank;</span><br><span class="line">	<span class="type">int</span> thread_count;</span><br><span class="line">	<span class="type">double</span> h; </span><br><span class="line">	<span class="type">double</span> ret = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">double</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">10000000</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> thread_counts;</span><br><span class="line">	<span class="type">double</span> start_time;</span><br><span class="line">	<span class="type">double</span> end_time;</span><br><span class="line"> </span><br><span class="line">	thread_counts = <span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line">	start_time = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="meta"># <span class="keyword">pragma</span> omp parallel private(x,my_result,local_a,local_b,i, local_n,my_rank,thread_count,h)</span></span><br><span class="line">	&#123;</span><br><span class="line">	    my_rank = <span class="built_in">omp_get_thread_num</span>();</span><br><span class="line">		thread_count = <span class="built_in">omp_get_num_threads</span>();</span><br><span class="line">		h = (b - a) / n;</span><br><span class="line">		local_n = n / thread_count;</span><br><span class="line">		local_a = a + my_rank * local_n * h;</span><br><span class="line">		local_b = local_a + local_n * h;</span><br><span class="line">		my_result = (<span class="built_in">f</span>(local_a) + <span class="built_in">f</span>(local_b)) / <span class="number">2.0</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; local_n - <span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			x = local_a + i * h;</span><br><span class="line">			my_result += <span class="built_in">f</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		my_result = my_result * h;</span><br><span class="line">    <span class="meta"># <span class="keyword">pragma</span> omp critical</span></span><br><span class="line">		ret += my_result;</span><br><span class="line">	&#125;</span><br><span class="line">	end_time = <span class="built_in">clock</span>();</span><br><span class="line"> </span><br><span class="line">	<span class="type">double</span> runtime = (<span class="type">double</span>)(end_time - start_time) / CLOCKS_PER_SEC;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;PI evaluation took: &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Run time took: &quot;</span> &lt;&lt; runtime &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202208301255848.png" alt="image-20220830125004441"></p>
<h3 id="实验四：编写OpenMP程序实现生产者消费者模型"><a href="#实验四：编写OpenMP程序实现生产者消费者模型" class="headerlink" title="实验四：编写OpenMP程序实现生产者消费者模型"></a>实验四：编写OpenMP程序实现生产者消费者模型</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>编写OpenMP程序，一些线程是生产者，一些线程是消费者。在文件集合中，每个生产者针对一个文件，从文件中读取文本，将读出的文本行插入到一个共享的队列中。消费者从队列中取出文本行，并对文本行进行分词（strtok函数）。符号是被空白符分开的单词，当消费者发现一个单词后，将单词输出。（体会线程安全性）</p>
<h4 id="问题解决-3"><a href="#问题解决-3" class="headerlink" title="问题解决"></a>问题解决</h4><p>生产者：线程随机产生整数“消息”和消息的目标线程，发送消息给目标线程</p>
<p>消费者：线程从自己的消息队列中取出消息并打印该消息</p>
<p>仍然才用类似于实验二的<strong>队列</strong>数据结构，文件Queue.h的编写如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">long</span> task;<span class="comment">//默认一个节点携带一个任务</span></span><br><span class="line">    Node* next;</span><br><span class="line">    <span class="built_in">Node</span>();</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">long</span> t,Node* p=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        task=t;</span><br><span class="line">        next=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列的数据结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* head;</span><br><span class="line">    Node* tail;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;</span><br><span class="line">        Node* p=<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">0</span>);</span><br><span class="line">        head=p;</span><br><span class="line">        tail=p;</span><br><span class="line">        length=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node* p=head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Queue is Empty!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Elements in Queue:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cout&lt;&lt;p-&gt;task&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;     </span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">long</span> val)</span></span>&#123;</span><br><span class="line">        Node* p=<span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        tail-&gt;next=p;</span><br><span class="line">        tail=p;<span class="comment">//更新尾节点</span></span><br><span class="line">        length+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">long</span> ret=head-&gt;next-&gt;task;</span><br><span class="line">        Node* p=head-&gt;next;</span><br><span class="line">        head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">        length-=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>进行生产者-消费者的并行编写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Queue q;<span class="comment">//生产者队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Send</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">	q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">	q.<span class="built_in">Display</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> thread_count;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Enter the number of threads:&quot;</span>;</span><br><span class="line">	cin&gt;&gt;thread_count;</span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel num_threads(thread_count)<span class="comment">//开辟线程</span></span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp for<span class="comment">//分配线程</span></span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;thread_count;i++)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;create thread:&quot;</span>&lt;&lt;<span class="built_in">omp_get_thread_num</span>();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//路障</span></span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> omp barrier</span></span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> msgs;</span><br><span class="line">		<span class="meta">#<span class="keyword">pragma</span> imp for private(msgs)<span class="comment">//private保障线程安全</span></span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;thread_count;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(msgs=<span class="number">0</span>;msgs&lt;thread_count;msgs++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">Send</span>(i);</span><br><span class="line">				<span class="built_in">Receive</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202208311556536.png" alt="image-20220831155604332"></p>
]]></content>
      <tags>
        <tag>并行设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Pthread学习文档</title>
    <url>/2022/08/22/Pthread%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p>线程是 CPU 调度的最小执行单位，你可以创建一个线程用于ListenMusic，再创建一个线程去PlayGame，这样操作系统就是同时处理这两个任务的（<a href="https://so.csdn.net/so/search?q=并发&amp;spm=1001.2101.3001.7020">并发</a>）。</p>
<p>最直观的感受就是，你可以边打游戏边听歌。</p>
<h3 id="Pthread库"><a href="#Pthread库" class="headerlink" title="Pthread库"></a>Pthread库</h3><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>POSIX 标准定义了一套线程操作相关的函数，用于让程序员更加方便地操作管理线程，函数名都是以前缀 pthread_开始，使用前包含头文件<pthread.h></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>在链接的时候要手动链接 pthread 这个库，如：gcc main.c -lpthread -o main</strong></p>
<h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>pthread_create()：创建一个线程</p>
<p>pthread_self（）：获取线程id</p>
<p>int pthread_equal(pthread_t t1, pthread_t t2)：比较两个线程是否完全相同</p>
<p>void pthread_exit(void *retval)：退出指定进程</p>
<p>int pthread_join(pthread_t thread,void **retval)：阻塞等待线程退出，获取线程退出状态，相当于进程中的 waitpid 函数，如果线程退出，pthread_join 立刻返回。</p>
<p>int pthread_detach(pthread_t thread)：将线程 ID 为 thread 的线程分离出去，所谓分离出去就是指主线程不需要再通过 pthread_join 等方式等待该线程的结束并回收其线程控制块（TCB）的资源，被分离的线程结束后由操作系统负责其资源的回收。</p>
<p>int pthread_cancel(pthread_t thread)：杀死线程</p>
<h3 id="入门：Pthread实现多线程HelloWorld"><a href="#入门：Pthread实现多线程HelloWorld" class="headerlink" title="入门：Pthread实现多线程HelloWorld"></a>入门：Pthread实现多线程HelloWorld</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> thread_count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Hello</span><span class="params">(<span class="type">void</span>* rank)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> thread;</span><br><span class="line">    <span class="type">pthread_t</span>* thread_handles;</span><br><span class="line">    <span class="comment">// thread_count=strtol(argv[1],NULL,10);//从终端进行输入</span></span><br><span class="line">    cin&gt;&gt;thread_count;</span><br><span class="line">    thread_handles=(<span class="type">pthread_t</span>*)<span class="built_in">malloc</span>(thread_count*<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>));</span><br><span class="line">    <span class="keyword">for</span>(thread=<span class="number">0</span>;thread&lt;thread_count;thread++)&#123;</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;thread_handles[thread],<span class="literal">NULL</span>,Hello,(<span class="type">void</span>*)thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello from the main thread&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//退出线程</span></span><br><span class="line">    <span class="keyword">for</span>(thread=<span class="number">0</span>;thread&lt;thread_count;thread++)&#123;</span><br><span class="line">        <span class="built_in">pthread_join</span>(thread_handles[thread],<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(thread_handles);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Hello</span><span class="params">(<span class="type">void</span>* rank)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from thread %ld of %d\n&quot;</span>,my_rank,thread_count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">4</span></span><br><span class="line">输出：</span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">0</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">1</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">2</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">3</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> the <span class="selector-tag">main</span> thread</span><br></pre></td></tr></table></figure>
<h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>共享内存有一个基本问题，即当多个线程同时更新一个共享资源时，结果是无法预测的。比如一个加法进程与一个乘法进程同时访问一个共享资源，得到的结果可以完全不同：</p>
<script type="math/tex; mode=display">
\begin{cases}
(1+2) \times 2 = 6 \\
(1\times 2) + 2 = 4
\end{cases}</script><p>应该<strong>保证临界区资源一次只允许一个线程执行代码片段</strong>。</p>
<h4 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h4><p>互斥量类型：pthread_mutex_t</p>
<p>销毁：int pthread_mutex_destroy(pthread_mutex_t* mutex_p)</p>
<p>获取：int pthread_mutex_lock(pthread_mutex_t* mutex_p)</p>
<p>释放：int pthread_mutex_unlock(pthread_mutex_t* mutex_p)</p>
<p><strong>用互斥量计算全局和</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread_sum</span><span class="params">(<span class="type">void</span>* rank)</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">    <span class="type">double</span> factor,my_sum=<span class="number">0.0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> i;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> my_n=n/thread_count;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> my_first_i=my_n*my_rank;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> my_last_i=my)first_i+my_n;</span><br><span class="line">    <span class="keyword">if</span>(my_first_i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        factor=<span class="number">1.0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        factor=<span class="number">-1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=my_first_i;i&lt;my_last_i;i++,factor=-factor)</span><br><span class="line">        my_sum+=factor/(<span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现互斥区访问</span></span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    sum+=my_sum;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生产者-消费者同步与信号量"><a href="#生产者-消费者同步与信号量" class="headerlink" title="生产者-消费者同步与信号量"></a>生产者-消费者同步与信号量</h3><h4 id="生产者消费者同步模型"><a href="#生产者消费者同步模型" class="headerlink" title="生产者消费者同步模型"></a>生产者消费者同步模型</h4><!-- ![image-20220822192200035](/home/pan/.config/Typora/typora-user-images/image-20220822192200035.png) -->
<p>例：每个线程向其他线程发送消息</p>
<p>1-2,2-3,3-4,……(n-1)-n,n-0，类似于这样</p>
<h5 id="使用忙等待"><a href="#使用忙等待" class="headerlink" title="使用忙等待"></a>使用忙等待</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Send_msg</span><span class="params">(<span class="type">void</span>* rank)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">    <span class="type">long</span> desk=(my_rank+thread_count<span class="number">-1</span>)%thread_count;</span><br><span class="line">    <span class="type">long</span> source=(my_rank+thread_count<span class="number">-1</span>)%thread_count;</span><br><span class="line">    <span class="type">char</span>* my_msg=<span class="built_in">malloc</span>(MSG*<span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    messages[dest]=my_msg;</span><br><span class="line">    <span class="comment">//忙等待</span></span><br><span class="line">    <span class="keyword">while</span>(message[my_rank]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Thread&quot;</span>&lt;&lt;my_rank&lt;&lt;message[my_rank];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的忙等待与条件判断是大致一致的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(message[my_rank]!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Thread&quot;</span>&lt;&lt;my_rank&lt;&lt;message[my_rank];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Thread&quot;</span>&lt;&lt;my_rank&lt;&lt;<span class="string">&quot;No message from&quot;</span>&lt;&lt;source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h5><p>可以类比一下操作系统中的P,V操作，将上述忙等待的内容更改成如下即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sem_post</span>(&amp;semphores[dest]);</span><br><span class="line"><span class="built_in">sem_wait</span>(&amp;semphores[my_rank]);</span><br></pre></td></tr></table></figure>
<h3 id="路障与条件变量"><a href="#路障与条件变量" class="headerlink" title="路障与条件变量"></a>路障与条件变量</h3><h4 id="路障"><a href="#路障" class="headerlink" title="路障"></a>路障</h4><p>路障指，使所有线程到达程序中同一个位置后，再继续执行。</p>
<h5 id="实现方式1：忙等待"><a href="#实现方式1：忙等待" class="headerlink" title="实现方式1：忙等待"></a>实现方式1：忙等待</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路障需要一个不能重复使用的共享变量</span></span><br><span class="line"><span class="type">int</span> counter=<span class="number">0</span>;<span class="comment">//初始化为0</span></span><br><span class="line"><span class="type">int</span> thread_count;</span><br><span class="line"><span class="type">pthread_mutex_t</span> barrier_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread_work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;barrier_mutex);<span class="comment">//加锁</span></span><br><span class="line">    counter++;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;barrier_mutex);<span class="comment">//解锁</span></span><br><span class="line">    <span class="comment">//到达同一个地点，忙等待排队</span></span><br><span class="line">    <span class="keyword">while</span>(counter&lt;thread_count)&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="实现方式2：信号量"><a href="#实现方式2：信号量" class="headerlink" title="实现方式2：信号量"></a>实现方式2：信号量</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> counter=<span class="number">0</span>;<span class="comment">//无法重复使用的共享变量\</span></span><br><span class="line"><span class="comment">sem_t count_sem=1;</span></span><br><span class="line"><span class="type">sem_t</span> barrier_sem=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread_work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">sem_wait</span>(&amp;count_sem);</span><br><span class="line">    <span class="keyword">if</span>(counter==thread_count<span class="number">-1</span>)&#123;</span><br><span class="line">        counter=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;count_sem);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;thread_count<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;barrier_sem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;count_sem);</span><br><span class="line">        <span class="built_in">sem_wait</span>(&amp;barrier_sem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当路障重复使用时，barrier_sem产生竞争。</p>
]]></content>
      <tags>
        <tag>并行设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Pthread使用文档</title>
    <url>/2022/08/22/Pthread%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p>线程是 CPU 调度的最小执行单位，你可以创建一个线程用于ListenMusic，再创建一个线程去PlayGame，这样操作系统就是同时处理这两个任务的（<a href="https://so.csdn.net/so/search?q=并发&amp;spm=1001.2101.3001.7020">并发</a>）。</p>
<p>最直观的感受就是，你可以边打游戏边听歌。</p>
<h3 id="Pthread库"><a href="#Pthread库" class="headerlink" title="Pthread库"></a>Pthread库</h3><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>POSIX 标准定义了一套线程操作相关的函数，用于让程序员更加方便地操作管理线程，函数名都是以前缀 pthread_开始，使用前包含头文件<pthread.h></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>在链接的时候要手动链接 pthread 这个库，如：gcc main.c -lpthread -o main</strong></p>
<h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>pthread_create()：创建一个线程</p>
<p>pthread_self（）：获取线程id</p>
<p>int pthread_equal(pthread_t t1, pthread_t t2)：比较两个线程是否完全相同</p>
<p>void pthread_exit(void *retval)：退出指定进程</p>
<p>int pthread_join(pthread_t thread,void **retval)：阻塞等待线程退出，获取线程退出状态，相当于进程中的 waitpid 函数，如果线程退出，pthread_join 立刻返回。</p>
<p>int pthread_detach(pthread_t thread)：将线程 ID 为 thread 的线程分离出去，所谓分离出去就是指主线程不需要再通过 pthread_join 等方式等待该线程的结束并回收其线程控制块（TCB）的资源，被分离的线程结束后由操作系统负责其资源的回收。</p>
<p>int pthread_cancel(pthread_t thread)：杀死线程</p>
<h3 id="入门：Pthread实现多线程HelloWorld"><a href="#入门：Pthread实现多线程HelloWorld" class="headerlink" title="入门：Pthread实现多线程HelloWorld"></a>入门：Pthread实现多线程HelloWorld</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> thread_count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Hello</span><span class="params">(<span class="type">void</span>* rank)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> thread;</span><br><span class="line">    <span class="type">pthread_t</span>* thread_handles;</span><br><span class="line">    <span class="comment">// thread_count=strtol(argv[1],NULL,10);//从终端进行输入</span></span><br><span class="line">    cin&gt;&gt;thread_count;</span><br><span class="line">    thread_handles=(<span class="type">pthread_t</span>*)<span class="built_in">malloc</span>(thread_count*<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>));</span><br><span class="line">    <span class="keyword">for</span>(thread=<span class="number">0</span>;thread&lt;thread_count;thread++)&#123;</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;thread_handles[thread],<span class="literal">NULL</span>,Hello,(<span class="type">void</span>*)thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello from the main thread&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//退出线程</span></span><br><span class="line">    <span class="keyword">for</span>(thread=<span class="number">0</span>;thread&lt;thread_count;thread++)&#123;</span><br><span class="line">        <span class="built_in">pthread_join</span>(thread_handles[thread],<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(thread_handles);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Hello</span><span class="params">(<span class="type">void</span>* rank)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from thread %ld of %d\n&quot;</span>,my_rank,thread_count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">4</span></span><br><span class="line">输出：</span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">0</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">1</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">2</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> thread <span class="number">3</span> of <span class="number">4</span></span><br><span class="line">Hello <span class="selector-tag">from</span> the <span class="selector-tag">main</span> thread</span><br></pre></td></tr></table></figure>
<h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>共享内存有一个基本问题，即当多个线程同时更新一个共享资源时，结果是无法预测的。比如一个加法进程与一个乘法进程同时访问一个共享资源，得到的结果可以完全不同：</p>
<script type="math/tex; mode=display">
\begin{cases}
(1+2) \times 2 = 6 \\
(1\times 2) + 2 = 4
\end{cases}</script><p>应该<strong>保证临界区资源一次只允许一个线程执行代码片段</strong>。</p>
<h4 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h4><p>互斥量类型：pthread_mutex_t</p>
<p>销毁：int pthread_mutex_destroy(pthread_mutex_t* mutex_p)</p>
<p>获取：int pthread_mutex_lock(pthread_mutex_t* mutex_p)</p>
<p>释放：int pthread_mutex_unlock(pthread_mutex_t* mutex_p)</p>
<p><strong>用互斥量计算全局和</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread_sum</span><span class="params">(<span class="type">void</span>* rank)</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">    <span class="type">double</span> factor,my_sum=<span class="number">0.0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> i;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> my_n=n/thread_count;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> my_first_i=my_n*my_rank;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> my_last_i=my)first_i+my_n;</span><br><span class="line">    <span class="keyword">if</span>(my_first_i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        factor=<span class="number">1.0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        factor=<span class="number">-1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=my_first_i;i&lt;my_last_i;i++,factor=-factor)</span><br><span class="line">        my_sum+=factor/(<span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现互斥区访问</span></span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    sum+=my_sum;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- ### 生产者-消费者同步与信号量

![image-20220822192200035](/home/pan/.config/Typora/typora-user-images/image-20220822192200035.png)

例：每个线程向其他线程发送消息 -->
]]></content>
      <tags>
        <tag>并行设计</tag>
      </tags>
  </entry>
  <entry>
    <title>并行程序设计第二次作业</title>
    <url>/2022/08/21/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h4 id="4-5-请修改使用互斥量的π计算程序，使临界区在for循环内。这个版本的性能与原来的忙等待版本相比如何？我们怎样解释它？"><a href="#4-5-请修改使用互斥量的π计算程序，使临界区在for循环内。这个版本的性能与原来的忙等待版本相比如何？我们怎样解释它？" class="headerlink" title="4.5  请修改使用互斥量的π计算程序，使临界区在for循环内。这个版本的性能与原来的忙等待版本相比如何？我们怎样解释它？"></a>4.5  请修改使用互斥量的π计算程序，使临界区在for循环内。这个版本的性能与原来的忙等待版本相比如何？我们怎样解释它？</h4><p>首先查询$\pi$的计算公式<script type="math/tex">\pi=4 \times (1-\frac{1}{3}+\frac{1}{5}-\frac{1}{7}+...+\frac{(-1)^n}{2n+1}+...)</script></p>
<p>思路相对简单，用多个线程处理计算，并将所有的计算都累加，最后得出$\pi$的值.</p>
<h5 id="忙等待"><a href="#忙等待" class="headerlink" title="忙等待"></a>忙等待</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> thread_count;<span class="comment">//线程数量</span></span><br><span class="line"><span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;                </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">Thread_sum</span><span class="params">(<span class="type">void</span>* rank)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> thread;</span><br><span class="line">	<span class="type">pthread_t</span>* thread_handles;	</span><br><span class="line">	thread_count = <span class="built_in">strtol</span>(argv[<span class="number">1</span>],<span class="literal">NULL</span>,<span class="number">10</span>);<span class="comment">//获取线程数量（即终端输入）</span></span><br><span class="line">	thread_handles = <span class="built_in">malloc</span>(thread_count*<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>));<span class="comment">//分配空间</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(thread = <span class="number">0</span>;thread &lt; thread_count;thread++)&#123;</span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">		<span class="built_in">pthread_create</span>(&amp;thread_handles[thread],<span class="literal">NULL</span>,Thread_sum,(<span class="type">void</span>*)thread);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(thread = <span class="number">0</span>;thread &lt; thread_count;thread++)&#123;</span><br><span class="line">        <span class="comment">//等待上一个进程结束</span></span><br><span class="line">		<span class="built_in">pthread_join</span>(thread_handles[thread],<span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(thread_handles);<span class="comment">//释放空间</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,<span class="number">4</span>*sum);<span class="comment">//输出结果</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//main</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">Thread_sum</span><span class="params">(<span class="type">void</span> *rank)</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">	<span class="type">double</span> factor,my_sum = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> i;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_n = n/thread_count;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_first_i = my_n*my_rank;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_last_i = my_first_i + my_n;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span>(my_first_i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		factor = <span class="number">1.0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        factor = <span class="number">-1.0</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(i = my_first_i;i &lt; my_last_i;i++,factor = -factor)&#123;</span><br><span class="line">		my_sum += factor/(<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//Use Busy-Waiting to solve critical sections after loop</span></span><br><span class="line">	<span class="keyword">while</span>(flag != my_rank);</span><br><span class="line">	sum += my_sum;</span><br><span class="line">	flag = (flag+<span class="number">1</span>) % thread_count;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="comment">//Thread_sum</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>忙等待的方法使用了while循环，持续占用CPU资源，且执行相加的顺序是按照编号的，可行性不足。</p>
<h5 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> thread_count; </span><br><span class="line"><span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;                </span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;<span class="comment">//实现互斥访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">Thread_sum</span><span class="params">(<span class="type">void</span>* rank)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> thread;</span><br><span class="line">	<span class="type">pthread_t</span>* thread_handles;</span><br><span class="line"> 	<span class="comment">//输入线程总数</span></span><br><span class="line">	thread_count = <span class="built_in">strtol</span>(argv[<span class="number">1</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">	thread_handles = <span class="built_in">malloc</span>(thread_count*<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>));</span><br><span class="line"> 	<span class="comment">//初始化互斥访问区</span></span><br><span class="line">    </span><br><span class="line">	<span class="built_in">pthread_mutex_init</span>(&amp;mutex,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">for</span>(thread = <span class="number">0</span>;thread &lt; thread_count;thread++)&#123;</span><br><span class="line">        <span class="comment">//创建一个线程</span></span><br><span class="line">		<span class="built_in">pthread_create</span>(&amp;thread_handles[thread],<span class="literal">NULL</span>,Thread_sum,(<span class="type">void</span>*)thread);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(thread = <span class="number">0</span>;thread &lt; thread_count;thread++)&#123;</span><br><span class="line">		<span class="built_in">pthread_join</span>(thread_handles[thread],<span class="literal">NULL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(thread_handles);<span class="comment">//释放空间</span></span><br><span class="line">	<span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,<span class="number">4</span>*sum);</span><br><span class="line">&#125;<span class="comment">//main</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">Thread_sum</span><span class="params">(<span class="type">void</span> *rank)</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">	<span class="type">double</span> factor,my_sum = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> i;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_n = n/thread_count;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_first_i = my_n*my_rank;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_last_i = my_first_i + my_n;</span><br><span class="line">	<span class="keyword">if</span>(my_first_i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		factor = <span class="number">1.0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		factor = <span class="number">-1.0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i = my_first_i;i &lt; my_last_i;i++,factor = -factor)&#123;</span><br><span class="line">		my_sum += factor/(<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">	sum += my_sum;</span><br><span class="line">	<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="comment">//Thread_sum</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>通过使用枷锁方法pthread_)mutex_lock()和解锁方法pthread_mutex_unlock()实现每次只有一个线程访问临界区，可以解决对关键部分的冲突访问。</p>
<h4 id="4-6-请修改使用互斥量的π计算程序，使用信号量替代互斥量。这个版本的性能与互斥量版本相比如何？"><a href="#4-6-请修改使用互斥量的π计算程序，使用信号量替代互斥量。这个版本的性能与互斥量版本相比如何？" class="headerlink" title="4.6 请修改使用互斥量的π计算程序，使用信号量替代互斥量。这个版本的性能与互斥量版本相比如何？"></a>4.6 请修改使用互斥量的π计算程序，使用信号量替代互斥量。这个版本的性能与互斥量版本相比如何？</h4><h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> thread_count;<span class="comment">//线程数量</span></span><br><span class="line"><span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;                </span><br><span class="line"><span class="type">sem_t</span> sem;<span class="comment">//信号量sem</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">Thread_sum</span><span class="params">(<span class="type">void</span>* rank)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> thread;</span><br><span class="line">	<span class="type">pthread_t</span>* thread_handles;</span><br><span class="line"> 	<span class="comment">//输入线程数量</span></span><br><span class="line">	thread_count = <span class="built_in">strtol</span>(argv[<span class="number">1</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">	thread_handles = <span class="built_in">malloc</span>(thread_count*<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>));<span class="comment">//为线程分配空间</span></span><br><span class="line">	<span class="comment">//初始化信号量 </span></span><br><span class="line">	<span class="built_in">sem_init</span>(&amp;sem,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span>(thread = <span class="number">0</span>;thread &lt; thread_count;thread++)&#123;</span><br><span class="line">		<span class="comment">//创建线程 </span></span><br><span class="line">		<span class="built_in">pthread_create</span>(&amp;thread_handles[thread],<span class="literal">NULL</span>,Thread_sum,(<span class="type">void</span>*)thread);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(thread = <span class="number">0</span>;thread &lt; thread_count;thread++)&#123;</span><br><span class="line">		<span class="built_in">pthread_join</span>(thread_handles[thread],<span class="literal">NULL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(thread_handles);<span class="comment">//释放空间</span></span><br><span class="line">	<span class="built_in">sem_destroy</span>(&amp;sem);<span class="comment">//释放空间	</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,<span class="number">4</span>*sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">Thread_sum</span><span class="params">(<span class="type">void</span> *rank)</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> my_rank=(<span class="type">long</span>)rank;</span><br><span class="line">	<span class="type">double</span> factor,my_sum = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> i;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_n = n/thread_count;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_first_i = my_n*my_rank;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> my_last_i = my_first_i + my_n;</span><br><span class="line">	<span class="keyword">if</span>(my_first_i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		factor = <span class="number">1.0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		factor = <span class="number">-1.0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i = my_first_i;i &lt; my_last_i;i++,factor = -factor)&#123;</span><br><span class="line">		my_sum += factor/(<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sem_wait</span>(&amp;sem);</span><br><span class="line">	sum += my_sum;</span><br><span class="line">	<span class="built_in">sem_post</span>(&amp;sem);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>初始化设定sem=1，所以在第一个要访问临界区的线程，运行sem_wait（sem），sem减一，并可以访问临界区。而其他线程执行sem_wait（sem）时，因sem=0，所以处于等待的状态。相比于互斥量的实现，信号量可以将信号初始化为一个任意非负值。</p>
<h4 id="4-7-尽管生产者一消费者同步采用信号量很容易实现，但它也能用互斥量来实现。"><a href="#4-7-尽管生产者一消费者同步采用信号量很容易实现，但它也能用互斥量来实现。" class="headerlink" title="4.7 尽管生产者一消费者同步采用信号量很容易实现，但它也能用互斥量来实现。"></a>4.7 尽管生产者一消费者同步采用信号量很容易实现，但它也能用互斥量来实现。</h4><p>基本的想法是：让生产者线程和消费者线程共享一个互斥量。用一个被主线程初始化为false的标志变量来表示是否有产品可以被“消费”。这两个线程的执行如下：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202208211824314.png" alt="image.png"></p>
<p>如果消费者线程首先进入循环，它会看到没有可用的信息(message_available值为false)并在调用pthread_mutex_unlock后返回。消费者线程重复上述过程，直到生产者线程生产出信息。请编写一个双线程程序，实现这个版本的生产者一消费者同步。可以将这个程序一般化吗？让它能够运行2k个线程，其中奇数线程是消费者，偶数线程是生产者。另外，将程序一般化为每个线程既是生产者又是消费者，能做到吗？例如，线程q既要发送一条信息给线程(q+1) mod t,又要从线程(q-1+t) mod t接收一条信息，如何编写程序？要使用忙等待吗？</p>
<h5 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h5><p>我们使用<strong>队列queue</strong>来表示上述具有n个缓冲区的缓冲池。每投入（取出）一个产品，缓存池中就相应的插入（删除）一个节点。由于该缓冲池是被组织成队列的形式，因此，队空队满的判断条件分别如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">q-&gt;front == q-&gt;rear;<span class="comment">//队空</span></span><br><span class="line">q-&gt;front == (q-&gt;rear+<span class="number">1</span>)%SIZE;<span class="comment">//队满</span></span><br></pre></td></tr></table></figure>
<p>引入一个整型变量num，置其初值为0，当生产者（消费者）进程向缓冲池投入（取走）一个产品时，num对应的加一（减一）。同时，由于缓冲区是共享的，因此需要对生产者、消费者使用缓冲区进行限制，以此达到同步的效果，即在生产者向缓冲区投入产品时，消费者不得使用缓冲池；消费者向缓冲区取出产品时同理。</p>
<p>生产者和消费者的操作进程可如下表示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sem_wait</span>();</span><br><span class="line">    <span class="built_in">lockf</span>();</span><br><span class="line">    <span class="built_in">QueueFull</span>();</span><br><span class="line">    <span class="built_in">Enqueue</span>();</span><br><span class="line">    <span class="built_in">unlockf</span>();</span><br><span class="line">    <span class="built_in">sem_post</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">customer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sem_wait</span>();</span><br><span class="line">    <span class="built_in">lockf</span>();</span><br><span class="line">    <span class="built_in">QueueEmpty</span>();</span><br><span class="line">    <span class="built_in">Dequeue</span>();</span><br><span class="line">    <span class="built_in">unlockf</span>();</span><br><span class="line">    <span class="built_in">sem_post</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="双线程"><a href="#双线程" class="headerlink" title="双线程"></a>双线程</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="comment">//信号量地址，信号量在线程间共享，信号量的初始值 </span></span><br><span class="line">	<span class="built_in">sem_init</span>(&amp;sem.count, <span class="number">0</span>, <span class="number">10</span>);    <span class="comment">//信号量初始化（做多容纳10条消息，容纳了10条生产者将不会生产消息）</span></span><br><span class="line">	<span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">NULL</span>);  <span class="comment">//互斥锁初始化</span></span><br><span class="line">	<span class="built_in">InitQueue</span>(&amp;(sem.q));   <span class="comment">//队列初始化</span></span><br><span class="line">	<span class="type">pthread_t</span> producid;</span><br><span class="line">	<span class="type">pthread_t</span> consumid;</span><br><span class="line">	<span class="built_in">pthread_create</span>(&amp;producid, <span class="literal">NULL</span>, Producer, <span class="literal">NULL</span>);   <span class="comment">//创建生产者线程</span></span><br><span class="line">	<span class="built_in">pthread_create</span>(&amp;consumid, <span class="literal">NULL</span>, Customer, <span class="literal">NULL</span>);   <span class="comment">//创建消费者线程</span></span><br><span class="line">	<span class="built_in">pthread_join</span>(consumid, <span class="literal">NULL</span>);    <span class="comment">//线程等待，如果没有这一步，主程序会直接结束，导致线程也直接退出。</span></span><br><span class="line">	<span class="built_in">sem_destroy</span>(&amp;sem.count);         <span class="comment">//信号量的销毁 </span></span><br><span class="line">	<span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);   <span class="comment">//互斥锁的销毁</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2k进程"><a href="#2k进程" class="headerlink" title="2k进程"></a>2k进程</h5><p>与上述双线程大致一致，将队列大小SIZE更改为2k即可。</p>
<h5 id="既是消费者又是生产者"><a href="#既是消费者又是生产者" class="headerlink" title="既是消费者又是生产者"></a>既是消费者又是生产者</h5><p>将队列大小SIZE更改为1能满足一部分操作。</p>
<h5 id="q向-q-1-modt发送，从-q-1-modt接收"><a href="#q向-q-1-modt发送，从-q-1-modt接收" class="headerlink" title="q向(q+1)modt发送，从(q-1)modt接收"></a>q向(q+1)modt发送，从(q-1)modt接收</h5><p>需要创建t个队列，通过忙等待的方式进行生产者消费者进程同步。</p>
]]></content>
      <tags>
        <tag>并行设计</tag>
      </tags>
  </entry>
  <entry>
    <title>并行程序设计第一次作业</title>
    <url>/2022/08/21/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<p>定义最后返回的累加值$sum$，以及各个核中操作数的始末$my \underline{ }first \underline{ } i, my \underline{ } last \underline{ } i$：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">my_first_i=...;</span><br><span class="line">my_last_i=...;</span><br></pre></td></tr></table></figure>
<p>在多个核中分别进行累加操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=my_first_i;my_i&lt;my_last_i;i++)&#123;</span><br><span class="line">	t=<span class="built_in">computeVal</span>();<span class="comment">//当前核的累加操作</span></span><br><span class="line">    sum+=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当有$n$个数且有p个核时，可以知道</p>
<p>大多数核处理的数的数量为$ave=n/p$个；</p>
<p>平均分配后剩余的数字有$remain=n%p$个；</p>
<p>给每个核进行分配，如果不整除，就把余数分配到各个核中。如果被分配到，则当前核个数+1；反之则不变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ave=n/p;</span><br><span class="line">remain=n%p;</span><br><span class="line"><span class="keyword">if</span>(cur_flag&lt;remain)&#123;</span><br><span class="line">	cur_count=ave+<span class="number">1</span>;</span><br><span class="line">	cur_i=cur_rank*cur_count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	cur_count=ave;</span><br><span class="line">	cur_i=cur_rank*cur_count+remain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>并行设计</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-KMP算法</title>
    <url>/2022/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-kmp%20copy/</url>
    <content><![CDATA[<h3 id="什么是KMP算法"><a href="#什么是KMP算法" class="headerlink" title="什么是KMP算法"></a>什么是KMP算法</h3><p>KMP算法要解决的问题就是在字符串（也叫主串）中的模式（pattern）定位问题。说简单点就是我们平时常说的关键字搜索。模式串就是关键字（接下来称它为P），如果它在一个主串（接下来称为T）中出现，就返回它的具体位置，否则返回-1（常用手段）</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202207250035458.png"  /></p>
<h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><p>很容易可以想到暴力解法，直接进行搜索</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Findindex</span><span class="params">(string p,string t)</span></span>&#123;<span class="comment">//p是主串，t是模式串</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;p.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==t[j])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(j==t.<span class="built_in">length</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> i-j+<span class="number">1</span>;<span class="comment">//因为搜索到之后指针在最后一个对应的位置上</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然缺陷在于：<strong>回溯过于频繁</strong></p>
<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h4 id="1、最长公共前后缀"><a href="#1、最长公共前后缀" class="headerlink" title="1、最长公共前后缀"></a>1、最长公共前后缀</h4><p>要理解KMP算法的具体含义，引入<strong><em>最长公共前后缀</em></strong>帮助理解。如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202207250036711.png" style="zoom: 50%;" /></p>
<p>显然，字符串$ABCBA$的最长公共前后缀是$ABC$</p>
<h4 id="2、KMP算法的回溯思想"><a href="#2、KMP算法的回溯思想" class="headerlink" title="2、KMP算法的回溯思想"></a>2、KMP算法的回溯思想</h4><p>以下方图做例子，观察规律：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202207250036577.png" style="zoom: 50%;" /></p>
<p>可以发现，<strong><em>回溯的位置对应的是最长公共前后缀重合的地方</em></strong>。</p>
<p><strong>下方的理解非常重要，也是$next$数组理解的重要步骤！！！</strong><br>首先，目标串发生不匹配时的索引—5<br>然后，回溯的时候目标串的索引与主串的不匹配位置（也就是5）对齐—2。<strong><em>这个2恰好就是目标串发生不匹配位置前的字符串的最长前缀和后缀的长度！</em></strong></p>
<p>就此引入$next$数组。</p>
<h4 id="next-数组"><a href="#next-数组" class="headerlink" title="$next$数组"></a>$next$数组</h4><p>再添加几个例子加深理解。</p>
<p>如下目标串的索引为3号的位置发生不匹配：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202207250036897.png" style="zoom: 67%;" /></p>
<p>其3号位置前的字符串的最长相同前后缀的长度是1，所以就应该让目标串索引为1的位置与该不匹配处对齐：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202207250036625.png" alt=""></p>
<p>再来，如下目标串的索引为5号的位置发生不匹配：</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202207250036722.png" alt=""></p>
<p>其5号位置前的字符串的最长相同前后缀的长度是2，所以就应该让目标串索引为2的位置与该不匹配处对齐</p>
<p><img src="https://raw.githubusercontent.com/Sweet196/Picgo-images/main/problems/202207250036629.png" alt=""></p>
<h5 id="next-数组的求解-（eg-ABCABCMN）"><a href="#next-数组的求解-（eg-ABCABCMN）" class="headerlink" title="$next$数组的求解  （eg: ABCABCMN）"></a>$next$数组的求解  （eg: ABCABCMN）</h5><div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>M</th>
<th>N</th>
</tr>
</thead>
<tbody>
<tr>
<td>next[0]</td>
<td>next[1]</td>
<td>next[2]</td>
<td>next[3]</td>
<td>next[4]</td>
<td>next[5]</td>
<td>next[6]</td>
<td>next[7]</td>
</tr>
<tr>
<td>-1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getnext</span><span class="params">(string t,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> j=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">	next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;t.<span class="built_in">size</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">-1</span> || str[j]==str[k])</span><br><span class="line">		&#123;</span><br><span class="line">			j++;</span><br><span class="line">			k++;</span><br><span class="line">			next[j]=k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			k=next[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、KMP代码"><a href="#3、KMP代码" class="headerlink" title="3、KMP代码"></a>3、KMP代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(string s,string t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> next[],i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">getnext</span>(t,next);</span><br><span class="line">	<span class="keyword">while</span>(i&lt;s.<span class="built_in">size</span>() &amp;&amp; j&lt;t.<span class="built_in">size</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">-1</span> || s[i]==t[j])</span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			j=next[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(j&gt;=t.<span class="built_in">size</span>())</span><br><span class="line">		<span class="keyword">return</span> i-t.<span class="built_in">size</span>();<span class="comment">//返回目标串在主串的第一个字符的位置</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//找不到返回-1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
